[{"path":"https://fbellelli.github.io/countries/articles/auto_merge.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example data","title":"Easy joining with auto_merge()","text":"Let’s first start creating example data merge. tables created contain data relating countries, format keys different. tab1 classic cross-sectional data, providing one data point per country. tab2 tab3 typical panel (longitudinal) dataset, providing data countries different time periods. difference two structure table (tab2 long format, tab3 wide format) time frequency observations (annual vs monthly). Finally, tab4 tab5 provide sectoral data different countries.","code":"# FIFA female world cups won tab1 <- data.frame(country = c(\"UNITED STATES\", \"GERMANY\", \"NORWAY\", \"JAPAN\"),                    FIFA_cups = c(4, 2, 1, 1))  # nominal yearly GDP estimates from IMF (World economic outlook)  tab2 <- data.frame(nation = c(\"DEU\", \"JPN\", \"USA\", \"DEU\", \"JPN\", \"USA\"),                    year = c(rep(1980,3), rep(2019,3)),                     GDP = c(854, 1128, 2857, 3888, 5118, 21380),                     unit = \"billion current USD\")  # fictitious monthly time series tab3 <- data.frame(Date = c(\"01.01.2019\", \"01.02.2019\", \"01.03.2019\"),                     Japan = 1:3,                     Norway = 2:4,                     Germany = 3:5,                     US = 4:6)  # fictitious sectoral data tab4 <- data.frame(year = 2019,                    country = \"US\",                     industry = c(\"Agriculture\", \"Mining\", \"Manifacture\", \"Energy\"),                    freq = runif(1:4))  # more fictitious sectoral data tab5 <- data.frame(country = c(\"Estados Unidos\", \"Japon\", \"Estados Unidos\", \"Japon\"),                     sector = c(\"Agriculture\", \"Agriculture\",\"Energy\", \"Energy\"),                    x = c(T, F, T, F))"},{"path":"https://fbellelli.github.io/countries/articles/auto_merge.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Easy joining with auto_merge()","text":"Using auto_merge() really easy. users needs list tables merge. cases, function able take care everything else. function print console information merger status. important piece information table summarising columns merged together (see reproduction ). row table corresponds one input data tables, column key used merging. names table column names original data tables. names header summary table name merged columns final output table. instance, summary table telling us columns “year”, “Date” “year”, respectively third, fourth fifth input table merged together column called “time”. always good idea inspect summary table make sure correct columns merged. case function merge right columns, user can manually provide merging order. information, can may refer section article Manual merging orders.","code":"auto_merge(tab1, tab2, tab3, tab4, tab5) #> Identifying columns to merge #> Table 3 - countries detected in column names, pivoting columns: Japan, Norway, Germany, US #> Data type for variable time differ across tables - converting to character #> Converting country names #> Checking time columns #> The following columns are being merged: #>  #> =======  =======================  ====  ======== #> \\        country                  time  industry #> =======  =======================  ====  ======== #> Table 1  country                                 #> Table 2  nation                   year           #> Table 3  Table3_pivoted_colnames  Date           #> Table 4  country                  year  industry #> Table 5  country                        sector   #> =======  =======================  ====  ======== #>                                               Performing merge: 1/4                                               Performing merge: 2/4                                               Performing merge: 3/4                                               Performing merge: 4/4                                               Merge complete #> (Set merging_info to TRUE to save merging details) #>    country FIFA_cups       time   GDP                unit Table3_pivoted_values #> 1      USA         4 1980-01-01  2857 billion current USD                    NA #> 2      USA         4 2019-01-01 21380 billion current USD                     4 #> 3      USA         4 2019-01-01 21380 billion current USD                     4 #> 4      USA         4 2019-01-01 21380 billion current USD                     4 #> 5      USA         4 2019-01-01 21380 billion current USD                     4 #> 6      DEU         2 1980-01-01   854 billion current USD                    NA #> 7      DEU         2 2019-01-01  3888 billion current USD                     3 #> 8      NOR         1       <NA>    NA                <NA>                    NA #> 9      JPN         1 1980-01-01  1128 billion current USD                    NA #> 10     JPN         1 2019-01-01  5118 billion current USD                     1 #> 11     NOR        NA 2019-01-01    NA                <NA>                     2 #> 12     JPN        NA 2019-02-01    NA                <NA>                     2 #> 13     NOR        NA 2019-02-01    NA                <NA>                     3 #> 14     DEU        NA 2019-02-01    NA                <NA>                     4 #> 15     USA        NA 2019-02-01    NA                <NA>                     5 #> 16     JPN        NA 2019-03-01    NA                <NA>                     3 #> 17     NOR        NA 2019-03-01    NA                <NA>                     4 #> 18     DEU        NA 2019-03-01    NA                <NA>                     5 #> 19     USA        NA 2019-03-01    NA                <NA>                     6 #> 20     JPN        NA       <NA>    NA                <NA>                    NA #> 21     JPN        NA       <NA>    NA                <NA>                    NA #>       industry       freq     x #> 1         <NA>         NA    NA #> 2  Agriculture 0.08075014  TRUE #> 3       Mining 0.83433304    NA #> 4  Manifacture 0.60076089    NA #> 5       Energy 0.15720844  TRUE #> 6         <NA>         NA    NA #> 7         <NA>         NA    NA #> 8         <NA>         NA    NA #> 9         <NA>         NA    NA #> 10        <NA>         NA    NA #> 11        <NA>         NA    NA #> 12        <NA>         NA    NA #> 13        <NA>         NA    NA #> 14        <NA>         NA    NA #> 15        <NA>         NA    NA #> 16        <NA>         NA    NA #> 17        <NA>         NA    NA #> 18        <NA>         NA    NA #> 19        <NA>         NA    NA #> 20 Agriculture         NA FALSE #> 21      Energy         NA FALSE"},{"path":[]},{"path":"https://fbellelli.github.io/countries/articles/auto_merge.html","id":"dynamic-inputs","dir":"Articles","previous_headings":"The function in details","what":"Dynamic inputs","title":"Easy joining with auto_merge()","text":"function also accept lists tables inputs. useful passing dynamic set tables function.","code":"data <- list(tab1, tab2, tab3, tab4, tab5)  # the following two commands are equivalent auto_merge(tab1, tab2, tab3, tab4, tab5) auto_merge(data)"},{"path":"https://fbellelli.github.io/countries/articles/auto_merge.html","id":"country-names","dir":"Articles","previous_headings":"The function in details","what":"Country names","title":"Easy joining with auto_merge()","text":"auto_merge() automatically recognise country names convert nomenclature merging. example, country names tab1 tab2 different format, auto_merge() need converting names beforehand. function perform automatically. feature based function country_name(), described article. possible change destination nomenclature argument country_to. default, country names converted ISO 3166-1 alpha-3 standard. nomenclatures supported country_name() can requested.","code":"# changing the country names to UN spanish official name auto_merge(tab1, tab2, country_to = \"UN_es\", verbose = FALSE) #>                     country FIFA_cups time   GDP                unit #> 1 Estados Unidos de América         4 1980  2857 billion current USD #> 2 Estados Unidos de América         4 2019 21380 billion current USD #> 3                  Alemania         2 1980   854 billion current USD #> 4                  Alemania         2 2019  3888 billion current USD #> 5                   Noruega         1   NA    NA                <NA> #> 6                     Japón         1 1980  1128 billion current USD #> 7                     Japón         1 2019  5118 billion current USD"},{"path":"https://fbellelli.github.io/countries/articles/auto_merge.html","id":"pivotting-of-countries-and-years-in-table-headers","dir":"Articles","previous_headings":"The function in details","what":"Pivotting of countries and years in table headers","title":"Easy joining with auto_merge()","text":"country names years found column names, function automatically transform table wide long format pivoting country/year columns. least 3 country names years need present table header trigger automatic pivoting. Pivoting can turned setting auto_melt = FALSE. additional information, refer documentation function auto_melt(). first example , auto_melt option turned (default behaviour). function detects country names header table proceeds pivoting corresponding columns. Pivoted columns name \"Table?_pivoted_colnames\" data columns stored column \"Table?_pivoted_data\" (? stands number table provided input). message printed console inform user columns pivoted. Notice second example pivoting performed. result, shared key found merging two tables just stacked final output.","code":"# with auto_melt auto_merge(tab1, tab3) #> Identifying columns to merge #> Table 2 - countries detected in column names, pivoting columns: Japan, Norway, Germany, US #> Converting country names #> Checking time columns #> The following columns are being merged: #>  #> =======  =======================  ==== #> \\        country                  time #> =======  =======================  ==== #> Table 1  country                       #> Table 2  Table2_pivoted_colnames  Date #> =======  =======================  ==== #>                                               Performing merge: 1/1                                               Merge complete #> (Set merging_info to TRUE to save merging details) #>    country FIFA_cups       time Table2_pivoted_values #> 1      USA         4 2019-01-01                     4 #> 2      USA         4 2019-02-01                     5 #> 3      USA         4 2019-03-01                     6 #> 4      DEU         2 2019-01-01                     3 #> 5      DEU         2 2019-02-01                     4 #> 6      DEU         2 2019-03-01                     5 #> 7      NOR         1 2019-01-01                     2 #> 8      NOR         1 2019-02-01                     3 #> 9      NOR         1 2019-03-01                     4 #> 10     JPN         1 2019-01-01                     1 #> 11     JPN         1 2019-02-01                     2 #> 12     JPN         1 2019-03-01                     3  # without auto_melt auto_merge(tab1, tab3, auto_melt = FALSE) #> Identifying columns to merge #> Converting country names #> Checking time columns #> The following columns are being merged: #>  #> =======  =======  ==== #> \\        country  time #> =======  =======  ==== #> Table 1  country       #> Table 2           Date #> =======  =======  ==== #>                                               Performing merge: 1/1                                               Merge complete #> (Set merging_info to TRUE to save merging details) #>   country FIFA_cups       time Japan Norway Germany US #> 1     USA         4       <NA>    NA     NA      NA NA #> 2     DEU         2       <NA>    NA     NA      NA NA #> 3     NOR         1       <NA>    NA     NA      NA NA #> 4     JPN         1       <NA>    NA     NA      NA NA #> 5    <NA>        NA 2019-01-01     1      2       3  4 #> 6    <NA>        NA 2019-02-01     2      3       4  5 #> 7    <NA>        NA 2019-03-01     3      4       5  6"},{"path":"https://fbellelli.github.io/countries/articles/auto_merge.html","id":"inner-vs-full-join","dir":"Articles","previous_headings":"The function in details","what":"Inner vs full join","title":"Easy joining with auto_merge()","text":"default, function return full join tables. means table-key combinations conserved output table. information available variable, NA used fill output table. contrast, inner join keeps combination keys available across tables. Click information join types. inner join can requested argument inner_join.","code":"auto_merge(tab1, tab2, tab3, tab4, tab5, inner_join = TRUE) #> Identifying columns to merge #> Table 3 - countries detected in column names, pivoting columns: Japan, Norway, Germany, US #> Data type for variable time differ across tables - converting to character #> Converting country names #> Checking time columns #> The following columns are being merged: #>  #> =======  =======================  ====  ======== #> \\        country                  time  industry #> =======  =======================  ====  ======== #> Table 1  country                                 #> Table 2  nation                   year           #> Table 3  Table3_pivoted_colnames  Date           #> Table 4  country                  year  industry #> Table 5  country                        sector   #> =======  =======================  ====  ======== #>                                               Performing merge: 1/4                                               Performing merge: 2/4                                               Performing merge: 3/4                                               Performing merge: 4/4                                               Merge complete #> (Set merging_info to TRUE to save merging details) #>   country FIFA_cups       time   GDP                unit Table3_pivoted_values #> 1     USA         4 2019-01-01 21380 billion current USD                     4 #> 2     USA         4 2019-01-01 21380 billion current USD                     4 #>      industry       freq    x #> 1 Agriculture 0.08075014 TRUE #> 2      Energy 0.15720844 TRUE"},{"path":"https://fbellelli.github.io/countries/articles/auto_merge.html","id":"turning-off-messages","dir":"Articles","previous_headings":"The function in details","what":"Turning off messages","title":"Easy joining with auto_merge()","text":"function’s messages tend wordy. wish suppress messages printed console can just turn option verbose = FALSE.","code":"auto_merge(tab1, tab2, tab3, tab4, tab5, verbose = F)"},{"path":"https://fbellelli.github.io/countries/articles/auto_merge.html","id":"saving-information-on-merging-operations","dir":"Articles","previous_headings":"The function in details","what":"Saving information on merging operations","title":"Easy joining with auto_merge()","text":"argument merging_info set TRUE, function return list object containing additional information merger. following objects saved output: merged_table: merged data table (.e. table get merging_info = FALSE). info_merged_columns: summary table printed console. gives overview columns merged together. always good idea inspect table make sure correct columns merged. info_country_names: country column found, user can find table summarising conversion country names destination nomenclature. can used check countries correctly identified. info_time_formats: similar , table summarises conversion made date columns. can used check time columns handled function. pivotted_columns: country names years found header table, auto_merge() automatically “pivots” table. Pivoting transforms table long format. name columns pivotted saved list format . call: list recapitulating user’s call.","code":""},{"path":"https://fbellelli.github.io/countries/articles/auto_merge.html","id":"manual-merging-orders","dir":"Articles","previous_headings":"","what":"Manual merging orders","title":"Easy joining with auto_merge()","text":"automatic merging process starts first identifying key table, .e. set variables identifying entries table. process optimised common formats country data. function try match key columns across tables based values. Columns containing country names time information identified processed take account different nomenclatures time formats. automatic process works common dataset structures, foolproof. Therefore, always advise check columns merged setting verbose = TRUE reading printout. Moreover, automatic detection process can increase overall merging time considerably. can especially long tables containing many columns large number tables merged. user can pass merge order argument save time merger, detection process succeed. Inputs need provided either 1) list column names, 2) vector regular expressions. go details format requirements. ) List column names case list passed, 3 key requirements regarding format. element list must vector length equal number tables merged. instance, 3 tables merged, list needs contain one character vectors length 3. One vector provided variable merge (example one countries one years). vectors contain names columns merged table, NA can inserted tables contain variable, names ordered order input tables (.e. first column name present first table merged). Optionally, name merged columns can modified assigning name elements list. name provided, first column name retained. example , requesting merge columns \"country\" \"nation\" tab1 tab2, columns \"year\" tab2 tab4. Notice inserting NA whenever key present table. addition, also changing name final table \"COUNTRIES\" \"YEARS\" naming elemnts list. B) Vector regular expressions case vector passed, element vector interpreted regular expression used matching columns merged. means need provide one regex variable want join. example, need one regex identifying country columns one identifying year columns. function scan column names pick first column matching regex’s pattern. name can provided variables final table naming elements vector. example, can achieve exactly merger simply following order: = c(\"COUNTRIES\" = \"country|nation\", \"YEARS\" = \"year\"). Since function pick first matching column table, user must careful regex match undesired column tables.","code":"# asking to merge country and year columns manually with a list of column names auto_merge(tab1, tab2, tab4,            by = list(\"COUNTRIES\" = c(\"country\", \"nation\", NA),                      \"YEARS\" = c(NA, \"year\", \"year\"))) #> Identifying columns to merge #> Converting country names #> Checking time columns #> The following columns are being merged: #>  #> =======  =========  ===== #> \\        COUNTRIES  YEARS #> =======  =========  ===== #> Table 1  country          #> Table 2  nation     year  #> Table 3             year  #> =======  =========  ===== #>                                               Performing merge: 1/2                                               Performing merge: 2/2                                               Merge complete #> (Set merging_info to TRUE to save merging details) #>    COUNTRIES FIFA_cups YEARS   GDP                unit country    industry #> 1        USA         4  1980  2857 billion current USD    <NA>        <NA> #> 2        USA         4  2019 21380 billion current USD      US Agriculture #> 3        USA         4  2019 21380 billion current USD      US      Mining #> 4        USA         4  2019 21380 billion current USD      US Manifacture #> 5        USA         4  2019 21380 billion current USD      US      Energy #> 6        DEU         2  1980   854 billion current USD    <NA>        <NA> #> 7        DEU         2  2019  3888 billion current USD      US Agriculture #> 8        DEU         2  2019  3888 billion current USD      US      Mining #> 9        DEU         2  2019  3888 billion current USD      US Manifacture #> 10       DEU         2  2019  3888 billion current USD      US      Energy #> 11       NOR         1    NA    NA                <NA>    <NA>        <NA> #> 12       JPN         1  1980  1128 billion current USD    <NA>        <NA> #> 13       JPN         1  2019  5118 billion current USD      US Agriculture #> 14       JPN         1  2019  5118 billion current USD      US      Mining #> 15       JPN         1  2019  5118 billion current USD      US Manifacture #> 16       JPN         1  2019  5118 billion current USD      US      Energy #>          freq #> 1          NA #> 2  0.08075014 #> 3  0.83433304 #> 4  0.60076089 #> 5  0.15720844 #> 6          NA #> 7  0.08075014 #> 8  0.83433304 #> 9  0.60076089 #> 10 0.15720844 #> 11         NA #> 12         NA #> 13 0.08075014 #> 14 0.83433304 #> 15 0.60076089 #> 16 0.15720844 # asking to merge country and year columns manually with a vector of regular expressions auto_merge(tab1, tab2, tab4,            by = list(\"COUNTRIES\" = c(\"country\", \"nation\", NA),                      \"YEARS\" = c(NA, \"year\", \"year\"))) #> Identifying columns to merge #> Converting country names #> Checking time columns #> The following columns are being merged: #>  #> =======  =========  ===== #> \\        COUNTRIES  YEARS #> =======  =========  ===== #> Table 1  country          #> Table 2  nation     year  #> Table 3             year  #> =======  =========  ===== #>                                               Performing merge: 1/2                                               Performing merge: 2/2                                               Merge complete #> (Set merging_info to TRUE to save merging details) #>    COUNTRIES FIFA_cups YEARS   GDP                unit country    industry #> 1        USA         4  1980  2857 billion current USD    <NA>        <NA> #> 2        USA         4  2019 21380 billion current USD      US Agriculture #> 3        USA         4  2019 21380 billion current USD      US      Mining #> 4        USA         4  2019 21380 billion current USD      US Manifacture #> 5        USA         4  2019 21380 billion current USD      US      Energy #> 6        DEU         2  1980   854 billion current USD    <NA>        <NA> #> 7        DEU         2  2019  3888 billion current USD      US Agriculture #> 8        DEU         2  2019  3888 billion current USD      US      Mining #> 9        DEU         2  2019  3888 billion current USD      US Manifacture #> 10       DEU         2  2019  3888 billion current USD      US      Energy #> 11       NOR         1    NA    NA                <NA>    <NA>        <NA> #> 12       JPN         1  1980  1128 billion current USD    <NA>        <NA> #> 13       JPN         1  2019  5118 billion current USD      US Agriculture #> 14       JPN         1  2019  5118 billion current USD      US      Mining #> 15       JPN         1  2019  5118 billion current USD      US Manifacture #> 16       JPN         1  2019  5118 billion current USD      US      Energy #>          freq #> 1          NA #> 2  0.08075014 #> 3  0.83433304 #> 4  0.60076089 #> 5  0.15720844 #> 6          NA #> 7  0.08075014 #> 8  0.83433304 #> 9  0.60076089 #> 10 0.15720844 #> 11         NA #> 12         NA #> 13 0.08075014 #> 14 0.83433304 #> 15 0.60076089 #> 16 0.15720844"},{"path":"https://fbellelli.github.io/countries/articles/auto_merge.html","id":"good-to-know","dir":"Articles","previous_headings":"","what":"Good to know","title":"Easy joining with auto_merge()","text":"shared key merging found among tables, tables get stacked. country, time column merging key found tables, merging attempted based column names. say, function try merge columns identical names. overlapping name found, error returned. columns merged differing data types (e.g. numeric logical), converted character.","code":""},{"path":"https://fbellelli.github.io/countries/articles/data_structure.html","id":"example-dataset","dir":"Articles","previous_headings":"","what":"Example dataset","title":"Detecting the structure of data tables","text":"vignette use dataset country policies example functions package. dataset contains 41 columns rather complex structure. Every row identified combination Country name (column 21), Year (Column 9), Policy measure number (column 1), HS code (column 39) — code identifying traded commodities. dataset extension based WTO environmental databse (EDB). information dataset can found .","code":"#download data temp <- tempfile() download.file(\"https://fbellelli.com/data%20files/Extended%20EDB%20by%20measure-country-HS%20chapter.zip\", temp, mode=\"wb\")  #unzip and load it in R library(data.table) example <- fread(   unzip(temp,\"Extended EDB (by measure-country-HS chapter).csv\"),   stringsAsFactors=FALSE,   encoding = \"Latin-1\")"},{"path":"https://fbellelli.github.io/countries/articles/data_structure.html","id":"finding-columns-containing-country-and-time-information","dir":"Articles","previous_headings":"","what":"Finding columns containing country and time information","title":"Detecting the structure of data tables","text":"functions find_countrycol() find_timecol() can used return respectively columns containing country names date/year information. example , function find_countrycol() used examine example dataset. argument min_share used indicate whether look entire column Country names column contains Country names. numeric value indicating minimum share entries column country names. Similarly, can look time columns following way: default, function return name column. However, argument return_index can used get indices column table. Computations may take long large tables many columns. speed operations, functions operate evaluating table random sample rows. sample size can adjusted argument sample_size. also possible request use entire table passing value NA. Finally, also possible request return columns containing NA values specifying: allow_NA = FALSE. two functions based is_country() is_date(), can used test string Country name date. overview first function provided vignette Dealing country names, look `is_date()´.","code":"#Columns of country names find_countrycol(example)   #> [1] \"COUNTRIES\"  #Return any column containing a country name find_countrycol(example, min_share=0)  #> [1] \"Notifying Member\" \"COUNTRIES\" # Date and year columns find_timecol(example)   #> [1] \"Year\" find_countrycol(example, return_index = TRUE) #> [1] 22 find_timecol(example, return_index = TRUE)   #> [1] 9"},{"path":"https://fbellelli.github.io/countries/articles/data_structure.html","id":"testing-dates","dir":"Articles","previous_headings":"","what":"Testing dates","title":"Detecting the structure of data tables","text":"is_date() takes string vector argument outputs boolean vector indicating whether strings dates. argument formats can used specify formats checked. Standard R notation can used date elements (see table ).","code":"test <- c(\"December 2022\", \"20/01/1970\", \"Banana\", \"12.13.2000\")   is_date(test) #> [1]  TRUE  TRUE FALSE  TRUE is_date(test, formats=c(\"%d/%m/%Y\")) #> [1] FALSE  TRUE FALSE FALSE"},{"path":"https://fbellelli.github.io/countries/articles/data_structure.html","id":"finding-table-keys","dir":"Articles","previous_headings":"","what":"Finding table keys","title":"Detecting the structure of data tables","text":"find_keycol() function can used automate search key columns datasets. table key column set columns uniquely identifies entries table. function specifically designed country data, prioritise search country time columns, often keys country data. shown , function correctly identifies keys complex dataset introduced beginning article. function outputs vector column names uniquely identifies entries table. addition, also indicates whether column contains country, time information. Just like find function page, possible request column index instead name passing return_index = TRUE. Due potentially high number column combinations table, function tests likely options. function first look country time columns. Next, left-columns prioritised. Also, function look common country data formats (e.g. cross-sectional, time-series, panel data, dyadic, etc.) searches two additional key columns type . key found end search, function returns NULL value. Computation can slow large datasets. Therefore, function evaluates random sample rows table. sample size can controlled sample_size. Moreover, also possible restrict search subset columns providing vector column names indices argument search_only. Finally, function also permits user specify whether columns containing NA values allowed considered table keys. default allow_NA = FALSE keys typically contain missing values. However, example dataset column Tentative.HS.chapters.match contains blank entries read R NA, therefore default return NULL. argument allow_NA present deal edge cases. user wants test specific set columns, package also provides function is_keycol() check whether provided columns uniquely identify entries dataset.","code":"find_keycol(example, allow_NA = TRUE) #>                       country                          time  #>                   \"COUNTRIES\"                        \"Year\"  #>                         other                         other  #>                          \"Nr\" \"Tentative HS chapters match\" #This will only check if a key is found among the first three columns find_keycol(example, allow_NA = TRUE, search_only = 1:3) #> NULL find_keycol(example, allow_NA = FALSE) #> NULL is_keycol(example, c(\"COUNTRIES\",\"Year\"), allow_NA = TRUE) #> [1] FALSE is_keycol(example, c(\"COUNTRIES\",\"Year\", \"Nr\",\"Tentative HS chapters match\"), allow_NA = TRUE) #>  #> Found NA values in: Tentative HS chapters match #> [1] TRUE"},{"path":"https://fbellelli.github.io/countries/articles/dealing_with_names.html","id":"identifying-country-names","dir":"Articles","previous_headings":"","what":"Identifying country names","title":"Dealing with country names","text":"function is_country() allows check whether string country name. argument fuzzy_match can used increase tolerance allow small typos names. Furthermore, is_country() can also used check specific subset countries. following example, function used test whether string relates India Sri Lanka, allowing different naming conventions languages. Finally, package also provides function find_countrycol(), can used find columns data frame contain country names.","code":"is_country(c(\"United States\",\"Unated States\",\"dot\",\"DNK\",123), fuzzy_match = FALSE) # FALSE is the default and will run faster #> [1]  TRUE FALSE FALSE  TRUE FALSE is_country(c(\"United States\",\"Unated States\",\"dot\",\"DNK\",123), fuzzy_match = TRUE) #> [1]  TRUE  TRUE FALSE  TRUE FALSE is_country(x=c(\"Ceylon\",\"LKA\",\"Indonesia\",\"Inde\"), check_for=c(\"India\",\"Sri Lanka\")) #> [1]  TRUE  TRUE FALSE  TRUE"},{"path":"https://fbellelli.github.io/countries/articles/dealing_with_names.html","id":"getting-a-list-of-country-names","dir":"Articles","previous_headings":"","what":"Getting a list of country names","title":"Dealing with country names","text":"functions list_countries() random_countries() allow get list country names. former return list countries, second provides n randomly picked countries. function allows request country names different languages nomenclatures. list possible languages nomenclatures available next section.","code":"random_countries(5) #> [1] \"Peru\"                                    #> [2] \"Mozambique\"                              #> [3] \"Slovenia\"                                #> [4] \"Korea (Democratic People's Republic of)\" #> [5] \"Turks and Caicos Islands\" list_countries()[1:5] #> [1] \"Afghanistan\"    \"Åland Islands\"  \"Albania\"        \"Algeria\"        #> [5] \"American Samoa\" random_countries(5, nomenclature = \"ISO3\") #> [1] \"HMD\" \"IRL\" \"CHN\" \"NIC\" \"SAU\" random_countries(5, nomenclature = \"name_ar\") #> [1] \"توفالو\"          \"سنغافورة\"        \"السنغال\"         \"ساموا الأمريكية\" #> [5] \"بنين\""},{"path":"https://fbellelli.github.io/countries/articles/dealing_with_names.html","id":"converting-and-translating-country-names","dir":"Articles","previous_headings":"","what":"Converting and translating country names","title":"Dealing with country names","text":"function country_name() can used convert country names different naming conventions translate different languages. multiple arguments passed argument , function output data.frame object, one column corresponding every naming convention. argument supports following naming conventions:","code":"example <- c(\"United States\",\"DR Congo\", \"Morocco\")  # Getting 3-letters ISO code country_name(x= example, to=\"ISO3\") #> [1] \"USA\" \"COD\" \"MAR\"  # Translating to Spanish country_name(x= example, to=\"name_es\") #> [1] \"Estados Unidos\"                  \"República Democrática del Congo\" #> [3] \"Marruecos\" # Requesting 2-letter ISO codes and translation to Spanish and French country_name(x= example, to=c(\"ISO2\",\"name_es\",\"name_fr\")) #>   ISO2                         name_es                          name_fr #> 1   US                  Estados Unidos                       États-Unis #> 2   CD República Democrática del Congo République démocratique du Congo #> 3   MA                       Marruecos                            Maroc"},{"path":"https://fbellelli.github.io/countries/articles/dealing_with_names.html","id":"further-options-and-warning-messages","dir":"Articles","previous_headings":"Converting and translating country names","what":"Further options and warning messages","title":"Dealing with country names","text":"country_name() can identify countries even provided mixed formats different languages. robust small misspellings recognises alternative name formulations old nomenclatures. information country matching process can obtained setting verbose=TRUE. function print information : number unique values provided user. example 7 distinct strings provided. many country names correspond exactly ones function’s reference list many processed fuzzy matching. example , \"C@ète d^Ivoire\" \"blablabla\" names processed fuzzy matching. function’s reference table can accessed command data(country_reference_list). Finally, match poor, function print number country names probably mismatched (example \"blablabla\"). addition, setting verbose=TRUE also print additional informations relating specific warnings normally given function: Multiple country IDs matched country name: warning issued multiple strings matched country. verbose mode, strings corresponding countries listed. example , \"US\" \"Estados Unidos\" matched country. vector country names unique identifier, indicate country name recognised correctly. user might consider using custom tables (refer next section). Unable find EXACT match country names: indicates impossible find exact match one country names fuzzy_match=FALSE. user might consider using fuzzy_match=TRUE custom tables (refer next section). low confidence matching country names: warning indicates strings matched poorly. Thus indicating country might misidentified. verbose mode function provide list problematic strings (see example ). poor_matches set FALSE (default), function return NA uncertain string. hand, poor_matches=TRUE function always return closest match, even poor. user might consider using custom tables solve issues misidentification country names (refer next section). Alternatively, user can set na_fill=TRUE replace resulting NAs original name provided x. country IDs match one country naming conventions: Conversion requested nomenclature information country. instance, example “Taiwan” correspondence UN M49 standard. verbose mode, function print country names affected problem. user might consider using custom tables solve type issues (refer next section). Alternatively, user can set na_fill=TRUE replace resulting NAs original name provided x. information verbose mode can accessed setting ´simplify=FALSE´. return list object containing: converted_data: normal output function match_table: conversion table information closest match country name distance metrics. summary: summary values distance metrics warning: logical value indicating whether warning issued function call: arguments passed user","code":"fuzzy_example <- c(\"US\",\"C@ète d^Ivoire\",\"Zaire\",\"FYROM\",\"Estados Unidos\",\"ITA\",\"blablabla\")  country_name(x= fuzzy_example, to=c(\"UN_en\")) #> Multiple country IDs have been matched to the same country name. #> There is low confidence on the matching of some country names, NA returned. #>  #> Set - verbose - to TRUE for more details #> [1] \"United States of America\"         \"Côte d’Ivoire\"                    #> [3] \"Democratic Republic of the Congo\" \"North Macedonia\"                  #> [5] \"United States of America\"         \"Italy\"                            #> [7] NA country_name(x= fuzzy_example, to=c(\"UN_en\"), verbose=TRUE) #>  #> In total 7 unique country names were provided #> 5/7 have been matched with EXACT matching #> 2/7 have been matched with FUZZY matching, out of which: #> 1/2 are a POOR match (likely wrongly identified) #>  #>  #> Multiple arguments have been matched to the same country name: #>   - Estados Unidos : United States of America  #>   - US : United States of America #>  #> No close match found for the following countries, NA returned: #> (set - poor_matches - to TRUE if you want the closest match to be returned or set - na_fill - to TRUE if you wish to fill the NAs with the original name supplied in - x) #>  - blablabla #> [1] \"United States of America\"         \"Côte d’Ivoire\"                    #> [3] \"Democratic Republic of the Congo\" \"North Macedonia\"                  #> [5] \"United States of America\"         \"Italy\"                            #> [7] NA country_name(x= c(\"Taiwan\",\"lsajdèd\"), to=c(\"UN_en\"), verbose=FALSE) #> Some country IDs have no match in one or more of the requested country naming conventions, NA returned. #> There is low confidence on the matching of some country names, NA returned. #>  #> Set - verbose - to TRUE for more details #> [1] NA NA  country_name(x= c(\"Taiwan\",\"lsajdèd\"), to=c(\"UN_en\"), verbose=FALSE, na_fill = TRUE) #> Some country IDs have no match in one or more of the requested country naming conventions, used original name to fill the NAs. #> There is low confidence on the matching of some country names, keeping the original names in - x. #>  #> Set - verbose - to TRUE for more details #> [1] \"Taiwan\"  \"lsajdèd\""},{"path":"https://fbellelli.github.io/countries/articles/dealing_with_names.html","id":"using-custom-conversion-tables","dir":"Articles","previous_headings":"","what":"Using custom conversion tables","title":"Dealing with country names","text":"cases, user might unhappy naming conversion valid conversion might exist provided territory. cases, might useful tweak conversion table. package contains utility function called match_table(), can used generate conversion tables small adjustments.","code":"example_custom <- c(\"Siam\",\"Burma\",\"H#@°)Koe2\")  #suppose we are unhappy with how \"H#@°)Koe2\" is interpreted by the function country_name(x = example_custom, to = \"name_en\") #> There is low confidence on the matching of some country names, NA returned. #>  #> Set - verbose - to TRUE for more details #> [1] \"Thailand\" \"Myanmar\"  NA  #match_table can be used to generate a table for small adjustments tab <- match_table(x = example_custom, to = \"name_en\") #> There is low confidence on the matching of some country names, returning the closest match. tab$name_en[2] <- \"Hong Kong\"  #which can then be used for conversion country_name(x = example_custom, to = \"name_en\", custom_table = tab) #> [1] \"Thailand\"  \"Myanmar\"   \"Hong Kong\""},{"path":"https://fbellelli.github.io/countries/articles/package_intro.html","id":"installing-and-loading-the-package","dir":"Articles","previous_headings":"","what":"Installing and loading the package","title":"Getting started","text":"Since package yet CRAN, needs downloaded directly Github repository. can done devtools package.","code":"# Install and load devtools install.packages(\"devtools\") library(devtools)  # Install and load countries package devtools::install_github(\"fbellelli/countries\", build_vignettes = TRUE) library(countries)"},{"path":"https://fbellelli.github.io/countries/articles/quick_map.html","id":"some-data-to-plot","dir":"Articles","previous_headings":"","what":"Some data to plot","title":"Easy country chloropleth maps","text":"Let’s start loading package putting together table country data use demonstration. table contains information countries’ population (numeric continuous variable), boolean variable indicating whether country landlocked, categorical/factor variable indicating whether cars country drive left right, finally information capital countries (name, latitude/longitude).","code":"library(countries)  data <- country_info(fields = c(\"population\", \"landlocked\", \"car\", \"capital\", \"capitalInfo\"))"},{"path":"https://fbellelli.github.io/countries/articles/quick_map.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Easy country chloropleth maps","text":"takes make plot one line code telling plot column \"car.side\"table data. function take care everything else. hood, function looks column country names matches one territories ISO standard 3166-1.","code":"quick_map(data, plot_col = \"car.side\", verbose = FALSE)"},{"path":"https://fbellelli.github.io/countries/articles/quick_map.html","id":"saving-your-plot","dir":"Articles","previous_headings":"Quick start","what":"Saving your plot","title":"Easy country chloropleth maps","text":"plot can saved passing file path argument save_to. comes predefined size resolution options. wish customised download, function ggplot2::ggsave() can used.","code":"quick_map(data, plot_col = \"car.side\",            save_to = \"example_path/plot.png\")"},{"path":"https://fbellelli.github.io/countries/articles/quick_map.html","id":"what-happens-if-a-country-is-not-recognised","dir":"Articles","previous_headings":"Quick start","what":"What happens if a country is not recognised ?","title":"Easy country chloropleth maps","text":"country name recognised match country standard, warning given user. example , country match (UNK) Kosovo, ISO 3166-1 standard. interested knowing exactly country matched can just use function country_name().","code":""},{"path":"https://fbellelli.github.io/countries/articles/quick_map.html","id":"zooming-regional-maps","dir":"Articles","previous_headings":"","what":"Zooming / Regional maps","title":"Easy country chloropleth maps","text":"Suppose wish plot map specific regions globe. package comes predefined zoom settings c(\"Default\", \"World\", \"Africa\", \"Asia\", \"Europe\", \"SEAsia\", \"NAmerica\", \"CAmerica\", \"SAmerica\", \"Oceania\"). Alternatively, also possible define custom zoom passing min/max longitude latitude.","code":"quick_map(data, plot_col = \"car.side\", zoom = \"Africa\") quick_map(data, plot_col = \"car.side\", zoom = c(25, 55, -10, 15))"},{"path":"https://fbellelli.github.io/countries/articles/quick_map.html","id":"customising-the-look-of-your-map","dir":"Articles","previous_headings":"","what":"Customising the look of your map","title":"Easy country chloropleth maps","text":"function provides basic settings customise essential elements map simple way. changes enough, full customisation can achieved ggplot commands. Let’s see examples.","code":""},{"path":"https://fbellelli.github.io/countries/articles/quick_map.html","id":"themes-and-visual-settings","dir":"Articles","previous_headings":"Customising the look of your map","what":"Themes and visual settings","title":"Easy country chloropleth maps","text":"argument theme possible switch among predefined looks map. theme can take value number 1 11, one predefined themes’ names: c(\"Default\", \"Greyscale\", \"Candy\", \"RedBlue\", \"Dark\", \"Reds\", \"Blues\", \"Greens\", \"Viridis\", \"Cividis\", \"Distinct\"). 0 \"NoTheme\" passed, ggplot2 settings used (theme applied map).  basic visual elements can modified within quick_map(). instance, case happy colour ordering, can reversed reverse_palette = TRUE. col_na can used set colour countries missing data (NAs), variable name can changed name_legend, finally, col_na width_border set colour thickness border lines territories (remove altogether).","code":"quick_map(data, plot_col = \"population\", verbose = FALSE,           theme = \"Candy\") quick_map(data[1:150,], plot_col = \"population\", verbose = FALSE,           theme = \"Greyscale\",           reverse_palette = TRUE,           name_legend = \"Countries' populations\\nas of 2022\",            col_na = \"darkred\",           col_border = \"NA\") # here we are removing the border lines"},{"path":"https://fbellelli.github.io/countries/articles/quick_map.html","id":"colour-scale-breaks","dir":"Articles","previous_headings":"Customising the look of your map","what":"Colour scale breaks","title":"Easy country chloropleth maps","text":"default, quick_map() discretises continuous variables, population, 6 buckets plotting. continuous scales usually easy interpret world maps. means colour assignment depends bucket country falls. cases, like example , automatic buckets defined quick_map() may yield best results. Users can supply values colour breaks manually argument col_breaks. example , manually pass powers ten breaks.  predefined themes limited number colours. many breaks, following themes support colours: c(\"Greyscale\", \"Dark\", \"Reds\", \"Blues\", \"Greens\", \"Viridis\", \"Cividis\", \"Distinct\"). Finally, wish keep continuous colour scale, instead disretised one, can request raw ggplot output theme = 0.","code":"quick_map(data, plot_col = \"population\", verbose = FALSE,           theme = \"RedBlue\",           col_breaks = c(0, 1e5, 1e6, 1e7 , 1e8, 1e9))"},{"path":"https://fbellelli.github.io/countries/articles/quick_map.html","id":"advanced-customisation","dir":"Articles","previous_headings":"Customising the look of your map","what":"Advanced customisation","title":"Easy country chloropleth maps","text":"nice thing quick_map() output ggplot object, customisation truly endless. Let’s start last plot: look can customised ggplot’s theme scale commands. example, remove name legend, provide custom colours 6 buckets, add title change background:  Anything works ggplot work also output quick_map(). ’s even possible add annotations additional layers map. example, image , adding text, arrows markers corresponding country capitals using longitude latitude coordinates.","code":"p <- quick_map(data, plot_col = \"population\", verbose = FALSE,           theme = \"RedBlue\",           col_breaks = c(0, 1e5, 1e6, 1e7 , 1e8, 1e9)) library(ggplot2)  # let's define 6 colours for our map colours6 <- c(\"white\", \"lightblue\", \"blue\", \"grey\", \"black\",\"yellow\")  # let's apply them to our plot! p +   scale_fill_manual(name = NULL,  # remove name in fill legend                     values = colours6)+ # use custom colours   ggtitle(\"World population\") + # add a title to the plot    theme(plot.background = element_rect(fill = \"#e3cff9\"), # change colour of background         legend.position = \"top\",  # move legend on top         plot.title = element_text(hjust = 0.5, family = \"mono\")) # center the title and change font family # extract capital longitude and latitude in data table data$long <- as.numeric(sub(x = data$capitalInfo.latlng, pattern = \"^.*; \", replacement = \"\", perl = TRUE)) data$lat <- as.numeric(sub(x = data$capitalInfo.latlng, pattern = \";.*$\", replacement = \"\", perl = TRUE))  # make a map quick_map(data, \"landlocked\", zoom = \"Europe\", theme = \"Greens\")+   geom_point(data = data, mapping = aes(x = long, y = lat, group = NULL), shape = 10) + # add markers for the capitals   geom_text(data = data[100:120,], mapping = aes(x = long, y = lat, label = capital, group = NULL), size = 3, nudge_y = -1) + # printing capital name for first 20 rows   annotate(\"segment\", x = 18, y = 35, xend = 14, yend = 42,            arrow = arrow(type = \"closed\", length = unit(0.02, \"npc\")))+   # add an arrow   annotate(\"label\", x = 18, y = 35, label = \"A boot!\")  # add a text annotation"},{"path":"https://fbellelli.github.io/countries/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Francesco Saverio Bellelli. Author, maintainer, copyright holder.           https://fbellelli.com/","code":""},{"path":"https://fbellelli.github.io/countries/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bellelli F (2025). countries: Deal Country Data Easy Way. R package version 1.2.2, https://fbellelli.github.io/countries/.","code":"@Manual{,   title = {countries: Deal with Country Data in an Easy Way},   author = {Francesco Saverio Bellelli},   year = {2025},   note = {R package version 1.2.2},   url = {https://fbellelli.github.io/countries/}, }"},{"path":"https://fbellelli.github.io/countries/index.html","id":"countries","dir":"","previous_headings":"","what":"Deal with Country Data in an Easy Way","title":"Deal with Country Data in an Easy Way","text":"countries R package designed quickly wrangle, merge explore country data. package contains functions easily identify convert country names, pull country info datasets, merge country data different sources, easily make world maps.","code":""},{"path":"https://fbellelli.github.io/countries/index.html","id":"installing-and-loading-the-package","dir":"","previous_headings":"","what":"Installing and loading the package","title":"Deal with Country Data in an Easy Way","text":"package can installed CRAN. Alternatively, development version can downloaded directly Github repository. can done devtools package.","code":"# Install package from CRAN install.packages(\"countries\")  # load package library(countries) # Install and load devtools install.packages(\"devtools\") library(devtools)  # Install countries devtools::install_github(\"fbellelli/countries\", build_vignettes = TRUE)  # load package library(countries)"},{"path":"https://fbellelli.github.io/countries/index.html","id":"dealing-with-country-names","dir":"","previous_headings":"","what":"Dealing with country names","title":"Deal with Country Data in an Easy Way","text":"package contains several functions work country names. instance, function country_name() can used convert country names different naming conventions translate different languages. country_name() can identify countries even provided mixed formats different languages. robust small misspellings recognises many alternative country names old nomenclatures. Learn deal country names article. function is_country() can used test country names subsets countries: functions list_countries() random_countries() allow get list country names. former return list countries, second provides n randomly picked countries.","code":"example <- c(\"US\",\"C@ète d^Ivoire\", \"Morocco\",\"FYROM\", \"Arabie Saoudite\")  # Getting 3-letters ISO code country_name(x= example, to=\"ISO3\") #> [1] \"USA\" \"CIV\" \"MAR\" \"MKD\" \"SAU\"  # Translating to spanish country_name(x= example, to=\"name_es\") #> [1] \"Estados Unidos\"      \"Costa de Marfil\"     \"Marruecos\"           #> [4] \"Macedonia del Norte\" \"Arabia Saudita\"  # Getting multiple nomenclatures country_name(x= example, to=c(\"ISO3\",\"ISO2\",\"UN_en\")) #>   ISO3 ISO2                    UN_en #> 1  USA   US United States of America #> 2  CIV   CI            Côte d’Ivoire #> 3  MAR   MA                  Morocco #> 4  MKD   MK          North Macedonia #> 5  SAU   SA             Saudi Arabia #Detect strings that are country names is_country(x = c(\"ITA\",\"Estados Unidos\",\"bungalow\",\"dog\",542)) #> [1]  TRUE  TRUE FALSE FALSE FALSE  #Checking for a specific subset of countries is_country(x = c(\"Ceylon\",\"LKA\",\"Indonesia\",\"Inde\"), check_for = c(\"India\",\"Sri Lanka\")) #> [1]  TRUE  TRUE FALSE  TRUE # Get 5 random country names in different languages/nomenclatures random_countries(5) #> [1] \"Congo\"      \"Qatar\"      \"Zimbabwe\"   \"Estonia\"    \"Tajikistan\" random_countries(5, nomenclature = \"ISO3\") #> [1] \"SJM\" \"ESH\" \"MTQ\" \"TLS\" \"IND\" random_countries(5, nomenclature = \"name_ar\") #> [1] \"سيشل\"                   \"اليمن\"                  \"جمهورية أفريقيا الوسطى\" #> [4] \"الأرجنتين\"              \"واليس وفوتونا\""},{"path":"https://fbellelli.github.io/countries/index.html","id":"getting-information-about-countries","dir":"","previous_headings":"","what":"Getting information about countries","title":"Deal with Country Data in an Easy Way","text":"country_info() allows download variety information countries REST Countries API, : currencies used, capital city, language spoken, flag, neighbouring countries, much . can find information function documentation.","code":"# What are the official languages of Switzerland? country_info(\"Switzerland\", \"languages\") #>     countries                              languages #> 1 Switzerland French; Swiss German; Italian; Romansh  # Get information on the capital name and currencies for multiple countries country_info(c(\"Canada\", \"Mozambique\", \"India\"), c(\"capital\", \"currencies\")) #>    countries   capital    currencies.name currencies.symbol #> 1     Canada    Ottawa    Canadian dollar                 $ #> 2 Mozambique    Maputo Mozambican metical                MT #> 3      India New Delhi       Indian rupee                 ₹"},{"path":"https://fbellelli.github.io/countries/index.html","id":"easy-country-maps","dir":"","previous_headings":"","what":"Easy country maps","title":"Deal with Country Data in an Easy Way","text":"quick_map(), takes one line code produce chloropleth maps. automatically recognises country names multiple languages nomenclatures. allows produce publication-grade maps seconds. Moreover, output ggplot object, visual look can customised infinite ways. can find examples article.","code":"# downloading some sample data to plot example_data <- country_info(fields = c(\"car\"))  # make a map quick_map(example_data, plot_col = \"car.side\")"},{"path":"https://fbellelli.github.io/countries/index.html","id":"merging-country-data","dir":"","previous_headings":"","what":"Merging country data","title":"Deal with Country Data in an Easy Way","text":"function auto_merge() simplifies merging country data tables : 1) allowing merging 2+ tables time, 2) Supporting automatic detection columns merge, 3) automatically handling different country naming conventions date formats, 4) automatic pivoting country names years tables’ headers. Learn country names functions article.","code":"# Let's create 4 tables with different formats and country names tab1 <- data.frame(country = c(\"Italy\", \"Pakistan\", \"Brazil\"), world_cups = c(4, 0, 5)) tab2 <- data.frame(exporter = c(\"DEU\", \"DEU\", \"ITA\", \"ITA\"), HS_chapter = c(9, 85, 9, 85), volume = c(800, 5000, 1000, 2000)) tab3 <- data.frame(HS = c(9, 85), Description = c(\"Coffee, tea and mate\", \"Electrical machinery\")) tab4 <- data.frame(year = c(2010, 2011), Allemagne = runif(2), Brésil = runif(2), Pakistan = runif(2))  # These tables can easily be merged with one line of code: auto_merge(tab1, tab2, tab3, tab4) #> Identifying columns to merge #> Table 4 - countries detected in column names, pivoting columns: Allemagne, Brésil, Pakistan #> Converting country names #> Checking time columns #> The following columns are being merged: #>  #> =======  =======================  ====  ========== #> \\        country                  time  HS_chapter #> =======  =======================  ====  ========== #> Table 1  country                                   #> Table 2  exporter                       HS_chapter #> Table 3                                 HS         #> Table 4  Table4_pivoted_colnames  year             #> =======  =======================  ====  ========== #>                                               Performing merge: 1/3                                               Performing merge: 3/3                                               Performing merge: 2/3                                               Merge complete #> (Set merging_info to TRUE to save merging details) #>    country world_cups HS_chapter volume time Table4_pivoted_values #> 1      ITA          4          9   1000   NA                    NA #> 2      ITA          4         85   2000   NA                    NA #> 3      PAK          0         NA     NA 2010             0.2321350 #> 4      PAK          0         NA     NA 2011             0.4595047 #> 5      BRA          5         NA     NA 2010             0.1800116 #> 6      BRA          5         NA     NA 2011             0.2851784 #> 7      DEU         NA          9    800 2010             0.1630334 #> 8      DEU         NA          9    800 2011             0.7002998 #> 9      DEU         NA         85   5000 2010             0.1630334 #> 10     DEU         NA         85   5000 2011             0.7002998 #>             Description #> 1  Coffee, tea and mate #> 2  Electrical machinery #> 3                  <NA> #> 4                  <NA> #> 5                  <NA> #> 6                  <NA> #> 7  Coffee, tea and mate #> 8  Coffee, tea and mate #> 9  Electrical machinery #> 10 Electrical machinery"},{"path":"https://fbellelli.github.io/countries/reference/auto_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplified merging of country data tables supporting different country nomenclatures and date formats — auto_join","title":"Simplified merging of country data tables supporting different country nomenclatures and date formats — auto_join","text":"aim function simplify country data merging. function performs merging multiple data tables able automatically detect country time columns.  can simplify merging handling differing country naming conventions date formats.","code":""},{"path":"https://fbellelli.github.io/countries/reference/auto_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplified merging of country data tables supporting different country nomenclatures and date formats — auto_join","text":"","code":"auto_join(   ...,   by = NULL,   country_to = \"ISO3\",   coalesce = FALSE,   inner_join = FALSE,   verbose = TRUE,   merging_info = TRUE )"},{"path":"https://fbellelli.github.io/countries/reference/auto_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplified merging of country data tables supporting different country nomenclatures and date formats — auto_join","text":"... Data merged. Inputs need data frames coercible data frames list vector indicating columns used merging data. provided, function automatically detect country time columns attempt merge . columns merged share name. First time column first two distinct country columns. country_to Nomenclature country names converted output. Default simple. description possible options, refer table vignette Dealing country names. inner_join Logical value indicating whether perform inner join. default FALSE, results full join provided tables. verbose Logical value indicating status messages printed console. Default TRUE. merging_info Logical value. TRUE, function output list containing merged data information generated merging process, conversion table used country names information table variables.","code":""},{"path":"https://fbellelli.github.io/countries/reference/auto_melt.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic pivoting of country and year columns to a long format — auto_melt","title":"Automatic pivoting of country and year columns to a long format — auto_melt","text":"least 3 country names years found column names, function automatically transform table wide long format pivoting country/year columns. equivalent applying tidyr::pivot_longer() data.table::melt() columns years countries names. function able detect years also preceded prefix.","code":""},{"path":"https://fbellelli.github.io/countries/reference/auto_melt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic pivoting of country and year columns to a long format — auto_melt","text":"","code":"auto_melt(   x,   names_to = \"pivoted_colnames\",   values_to = \"pivoted_data\",   verbose = TRUE,   pivoting_info = FALSE )"},{"path":"https://fbellelli.github.io/countries/reference/auto_melt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic pivoting of country and year columns to a long format — auto_melt","text":"x data.frame object check pivot country year columns. names_to String indicating column holding name pivoted columns called output table. Default \"pivoted_colnames\" values_to String indicating column containing values pivoted columns called output table. Default \"pivoted_data\" verbose Logical value. set TRUE (default), message displayed console indicating columns pivoted. set FALSE, messages turned . pivoting_info Logical value indicating whether return list names column pivoted. Default FALSE. set TRUE, output list instead simple data.frame. Teh list contain 1) pivoted table, 2) list pivoted columns.","code":""},{"path":"https://fbellelli.github.io/countries/reference/auto_melt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic pivoting of country and year columns to a long format — auto_melt","text":"table transformed \"long\" format pivoting country year columns. year columns found, numeric column called \"year_pivoted_colnames\" added isolating years extracted table header's.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/auto_melt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic pivoting of country and year columns to a long format — auto_melt","text":"","code":"# example data example <- data.frame(Date = c(\"01.01.2019\", \"01.02.2019\", \"01.03.2019\"),                       Japan = 1:3,                       Norway = 2:4,                       Germany = 3:5,                       US = 4:6) example2 <- data.frame(Sector = c(\"Agriculture\", \"Mining\", \"Forestry\"),                        X2000 = 1:3,                        X2001 = 2:4,                        X2002 = 3:5,                        X2003 = 4:6)  # examples pivotting countries and years from column names auto_melt(example) #> countries detected in column names, pivoting columns: Japan, Norway, Germany, ..., US #>    pivoted_colnames       Date pivoted_data #> 1             Japan 01.01.2019            1 #> 2            Norway 01.01.2019            2 #> 3           Germany 01.01.2019            3 #> 4                US 01.01.2019            4 #> 5             Japan 01.02.2019            2 #> 6            Norway 01.02.2019            3 #> 7           Germany 01.02.2019            4 #> 8                US 01.02.2019            5 #> 9             Japan 01.03.2019            3 #> 10           Norway 01.03.2019            4 #> 11          Germany 01.03.2019            5 #> 12               US 01.03.2019            6 auto_melt(example2) #> year detected in column names, pivoting columns: X2000, X2001, X2002, ..., X2003 #>    pivoted_colnames      Sector pivoted_data year_pivoted_colnames #> 1             X2000 Agriculture            1                  2000 #> 2             X2001 Agriculture            2                  2001 #> 3             X2002 Agriculture            3                  2002 #> 4             X2003 Agriculture            4                  2003 #> 5             X2000      Mining            2                  2000 #> 6             X2001      Mining            3                  2001 #> 7             X2002      Mining            4                  2002 #> 8             X2003      Mining            5                  2003 #> 9             X2000    Forestry            3                  2000 #> 10            X2001    Forestry            4                  2001 #> 11            X2002    Forestry            5                  2002 #> 12            X2003    Forestry            6                  2003"},{"path":"https://fbellelli.github.io/countries/reference/auto_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplified merging supporting different country nomenclatures and date formats — auto_merge","title":"Simplified merging supporting different country nomenclatures and date formats — auto_merge","text":"aim function simplify country data merging quick analyses. Compared normal merge function auto_merge(): able perform merging multiple data tables . Supports automatic detection columns merge. able handle different country naming conventions date formats. example, able recognise \"Italy\" \"ITA\" refer country merge two entries across tables. detects data wide format country names years column names automatically pivot data.","code":""},{"path":"https://fbellelli.github.io/countries/reference/auto_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplified merging supporting different country nomenclatures and date formats — auto_merge","text":"","code":"auto_merge(   ...,   by = NULL,   country_to = \"ISO3\",   inner_join = FALSE,   merging_info = FALSE,   verbose = TRUE,   auto_melt = TRUE )"},{"path":"https://fbellelli.github.io/countries/reference/auto_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplified merging supporting different country nomenclatures and date formats — auto_merge","text":"... Data merged. Inputs need data frames coercible data frame. Tables can also provided single list e.g. tab1, tab2, tab3 list(tab1, tab2, tab3). list vector indicating columns used merging data. provided, function try automatically detect columns merged. information, refer details sections. country_to Nomenclature country names converted output. Default ISO3. description possible options, refer table vignette Dealing country names. inner_join Logical value indicating whether perform inner join. default FALSE, results full join provided tables. merging_info Logical value. TRUE, function output list containing merged data information generated merging process, information columns merged conversion table used country names. default FALSE, results single merged table returned. verbose Logical value indicating whether print status messages console. Default TRUE. auto_melt Logical value indicating whether automatically pivot country names years present column names. Default TRUE. least 3 country names years found column names, function automatically transform table wide long format pivoting country/year columns.","code":""},{"path":"https://fbellelli.github.io/countries/reference/auto_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplified merging supporting different country nomenclatures and date formats — auto_merge","text":"merging_info = FALSE single merged table returned. merging_info = TRUE, list object returned, containing merged table (merged_table), table summarising columns merged (info_merged_columns), table summarising conversion country names (info_country_names), table summarising conversion time columns common format (info_time_formats), list columns pivoted wide tables country years column names detected (pivoted_columns), list recapitulating inputs passed function (call).","code":""},{"path":"https://fbellelli.github.io/countries/reference/auto_merge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplified merging supporting different country nomenclatures and date formats — auto_merge","text":"Automatic detection columns merge.  automatic detection process starts first identifying key table, .e. set variables identifying entries table. process optimised common formats country data.  function try match key columns across tables based values.  Columns containing country names time information identified processed take account different nomenclatures time formats.  automatic process works common dataset structures, foolproof. Therefore, always advise check columns merged setting verbose = TRUE reading printout.  Moreover, users aware automatic detection process can increase overall merging time considerably. can especially long tables containing many columns large number tables merged. Formatting argument argument provided , needs either 1) list column names, 2) vector regular expressions. format requirements following: case list passed, element list must vector length equal number tables merged (.e., 3 tables merged, list needs contain vectors length 3). vectors contain names columns merged table, NA can inserted tables contain variable, names ordered order tables merged (.e. first column name present first table merged). name merged columns can modified assigning name elements list. example, list(\"countries\"=c(\"Nation\",NA,\"COUNTRY\"), \"sector\"=c(\"Industry\",\"industry\",NA)) requesting merge columns tab1$Nation tab3$COUNTRY, columns tab1$Industry tab2$industry. two merged columns named \"countries\" \"sector\" output, requested user. case vector passed, element interpreted regular expression used matching columns merged. example, order provided list example written c(\"countries\"=\"Nation|COUNTRY\", \"sector\"=\"[Ii]ndustry\"). merge first column table whose name matches pattern described regular expression name two resulting columns \"countries\" \"sector\" respectively.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/auto_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplified merging supporting different country nomenclatures and date formats — auto_merge","text":"","code":"# sample data tab1 <- data.frame(Industry = c(1, 1, 2, 2), Nation = c(\"ITA\", \"FRA\", \"ITA\", \"FRA\"), tot = runif(4)) tab2 <- data.frame(industry = 1:4, rate = runif(1:4)) tab3 <- data.frame(COUNTRY = c(\"United States\", \"France\", \"India\"), national_avg = runif(3))  # examples of merging orders auto_merge(tab1, tab2, tab3) #> Identifying columns to merge #> Data type for variable Industry differ across tables - converting to character #> Converting country names #> The following columns are being merged: #>  #> =======  =======  ======== #> \\        country  Industry #> =======  =======  ======== #> Table 1  Nation   Industry #> Table 2           industry #> Table 3  COUNTRY           #> =======  =======  ======== #>                                                 Performing merge: 2/2                                                 Performing merge: 1/2                                                 Merge complete #> (Set merging_info to TRUE to save merging details) #>   Industry country        tot national_avg        rate #> 1        1     ITA 0.08075014           NA 0.007399441 #> 2        1     FRA 0.83433304    0.7725215 0.007399441 #> 3        2     ITA 0.60076089           NA 0.466393497 #> 4        2     FRA 0.15720844    0.7725215 0.466393497 #> 5     <NA>     USA         NA    0.7328820          NA #> 6     <NA>     IND         NA    0.8746007          NA #> 7        3    <NA>         NA           NA 0.497777389 #> 8        4    <NA>         NA           NA 0.289767245 auto_merge(list(tab1, tab2, tab3)) #> Identifying columns to merge #> Data type for variable Industry differ across tables - converting to character #> Converting country names #> The following columns are being merged: #>  #> =======  =======  ======== #> \\        country  Industry #> =======  =======  ======== #> Table 1  Nation   Industry #> Table 2           industry #> Table 3  COUNTRY           #> =======  =======  ======== #>                                                 Performing merge: 2/2                                                 Performing merge: 1/2                                                 Merge complete #> (Set merging_info to TRUE to save merging details) #>   Industry country        tot national_avg        rate #> 1        1     ITA 0.08075014           NA 0.007399441 #> 2        1     FRA 0.83433304    0.7725215 0.007399441 #> 3        2     ITA 0.60076089           NA 0.466393497 #> 4        2     FRA 0.15720844    0.7725215 0.466393497 #> 5     <NA>     USA         NA    0.7328820          NA #> 6     <NA>     IND         NA    0.8746007          NA #> 7        3    <NA>         NA           NA 0.497777389 #> 8        4    <NA>         NA           NA 0.289767245 auto_merge(tab1, tab2, tab3, by = c(\"countries\"=\"Nation|COUNTRY\", \"sector\"=\"[Ii]ndustry\")) #> Identifying columns to merge #> Data type for variable sector differ across tables - converting to character #> Converting country names #> The following columns are being merged: #>  #> =======  =========  ======== #> \\        countries  sector   #> =======  =========  ======== #> Table 1  Nation     Industry #> Table 2             industry #> Table 3  COUNTRY             #> =======  =========  ======== #>                                                 Performing merge: 2/2                                                 Performing merge: 1/2                                                 Merge complete #> (Set merging_info to TRUE to save merging details) #>   sector countries        tot national_avg        rate #> 1      1       ITA 0.08075014           NA 0.007399441 #> 2      1       FRA 0.83433304    0.7725215 0.007399441 #> 3      2       ITA 0.60076089           NA 0.466393497 #> 4      2       FRA 0.15720844    0.7725215 0.466393497 #> 5   <NA>       USA         NA    0.7328820          NA #> 6   <NA>       IND         NA    0.8746007          NA #> 7      3      <NA>         NA           NA 0.497777389 #> 8      4      <NA>         NA           NA 0.289767245 auto_merge(tab1, tab2, tab3, country_to = \"UN_fr\") #> Identifying columns to merge #> Data type for variable Industry differ across tables - converting to character #> Converting country names #> The following columns are being merged: #>  #> =======  =======  ======== #> \\        country  Industry #> =======  =======  ======== #> Table 1  Nation   Industry #> Table 2           industry #> Table 3  COUNTRY           #> =======  =======  ======== #>                                                 Performing merge: 2/2                                                 Performing merge: 1/2                                                 Merge complete #> (Set merging_info to TRUE to save merging details) #>   Industry               country        tot national_avg        rate #> 1        1                Italie 0.08075014           NA 0.007399441 #> 2        1                France 0.83433304    0.7725215 0.007399441 #> 3        2                Italie 0.60076089           NA 0.466393497 #> 4        2                France 0.15720844    0.7725215 0.466393497 #> 5     <NA> États-Unis d’Amérique         NA    0.7328820          NA #> 6     <NA>                  Inde         NA    0.8746007          NA #> 7        3                  <NA>         NA           NA 0.497777389 #> 8        4                  <NA>         NA           NA 0.289767245"},{"path":"https://fbellelli.github.io/countries/reference/check.wide.format.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function - Check for wide country data formats — check.wide.format","title":"Internal function - Check for wide country data formats — check.wide.format","text":"function looks country names year information column names. function designed simple panel country data, countries' time series arranged side side columns stacked rows. function return year/country column names least 3 country/year column names detected.","code":""},{"path":"https://fbellelli.github.io/countries/reference/check.wide.format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function - Check for wide country data formats — check.wide.format","text":"","code":"check.wide.format(x, adjacency = TRUE)"},{"path":"https://fbellelli.github.io/countries/reference/check.wide.format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function - Check for wide country data formats — check.wide.format","text":"x dataframe adjacency Logical value indicating whether column names containing country year information need adjacent . Default TRUE","code":""},{"path":"https://fbellelli.github.io/countries/reference/check.wide.format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function - Check for wide country data formats — check.wide.format","text":"Returns data.frame identifying columns names contain country year information.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/check.wide.format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal function - Check for wide country data formats — check.wide.format","text":"","code":"example <- data.frame(Year=2000:2010, China=0:10, US=10:20, Vietnam=30:40) countries:::check.wide.format(x=example) #>   countries col_indx col_name #> 1       CHN        2    China #> 2       USA        3       US #> 3       VNM        4  Vietnam"},{"path":"https://fbellelli.github.io/countries/reference/check_countries_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the connection to Countries REST API is working — check_countries_api","title":"Check if the connection to Countries REST API is working — check_countries_api","text":"Check connection REST Countries API working. function checks user internet connection answer returned Countries REST API.","code":""},{"path":"https://fbellelli.github.io/countries/reference/check_countries_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the connection to Countries REST API is working — check_countries_api","text":"","code":"check_countries_api(warnings = TRUE, timeout = 4)"},{"path":"https://fbellelli.github.io/countries/reference/check_countries_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the connection to Countries REST API is working — check_countries_api","text":"warnings Logical value indicating whether output warning connection. Default TRUE. timeout Numeric value giving timeout seconds attempting connection API. Default 4 second.","code":""},{"path":"https://fbellelli.github.io/countries/reference/check_countries_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the connection to Countries REST API is working — check_countries_api","text":"Returns logical value: TRUE connection, FALSE connection.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/check_countries_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the connection to Countries REST API is working — check_countries_api","text":"","code":"check_countries_api() #> Warning: Countries REST API appears to have some issues #> [1] FALSE"},{"path":"https://fbellelli.github.io/countries/reference/check_wide_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for wide country data formats — check_wide_format","title":"Check for wide country data formats — check_wide_format","text":"function looks country names year information column names. function designed simple panel country data, countries' time series arranged side side columns stacked rows. function return year/country column names least 3 country/year column names detected.","code":""},{"path":"https://fbellelli.github.io/countries/reference/check_wide_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for wide country data formats — check_wide_format","text":"","code":"check_wide_format(x, adjacency = TRUE)"},{"path":"https://fbellelli.github.io/countries/reference/check_wide_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for wide country data formats — check_wide_format","text":"x dataframe adjacency Logical value indicating whether column names containing country year information need adjacent . Default TRUE","code":""},{"path":"https://fbellelli.github.io/countries/reference/check_wide_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for wide country data formats — check_wide_format","text":"Returns data.frame identifying columns names contain country year information.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/check_wide_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for wide country data formats — check_wide_format","text":"","code":"example <- data.frame(Year=2000:2010, China=0:10, US=10:20, Vietnam=30:40) check_wide_format(x=example) #>   countries col_indx col_name #> 1       CHN        2    China #> 2       USA        3       US #> 3       VNM        4  Vietnam"},{"path":"https://fbellelli.github.io/countries/reference/country_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about countries — country_info","title":"Get information about countries — country_info","text":"function interface REST Countries API. allows request download information countries, : currency, capital city, language spoken, flag, neighbouring countries, much . NOTE: Internet access needed download information API. times API may unstable slow respond.","code":""},{"path":"https://fbellelli.github.io/countries/reference/country_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about countries — country_info","text":"","code":"country_info(   countries = NULL,   fields = NULL,   fuzzy_match = TRUE,   match_info = FALSE,   collapse = TRUE,   base_url = \"restcountries.com:8080/v3.1/\" )"},{"path":"https://fbellelli.github.io/countries/reference/country_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about countries — country_info","text":"countries vector countries wish download information. function also supports fuzzy matching capabilities facilitate querying. Information returned 249 countries ISO standard 3166. fields Character vector indicating fields query. description accepted fields can found . Alternatively, list accepted field names can obtained function list_fields(). fuzzy_match Logical value indicating whether allow fuzzy matching country names. Default TRUE. match_info Logical value indicating whether return information country names matched input countries. TRUE, two additional columns added output (matched_country is_country). Default FALSE. collapse Logical value indicating whether collapse multiple columns relating field together. Default TRUE. specific fields (currencies, languages, names), multiple columns returned. happens countries can take multiple values fields. example, country_info(\"Switzerland\", \"languages\", collapse = FALSE) return 4 columns field languages. collapse = TRUE, four columns collapsed one string, values separated semicolons. base_url Base URL used construct API calls. default \"restcountries.com:8080/v3.1/\".","code":""},{"path":"https://fbellelli.github.io/countries/reference/country_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about countries — country_info","text":"Returns requested information countries table. rows table correspond entries countries, columns correspond requested fields.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/country_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about countries — country_info","text":"","code":"# Run examples only if a connection to the API is available: if (check_countries_api(warnings = FALSE)){  # The example below queries information on the currency used in Brazil, US and France: info <- country_info(countries = \"Brazil\", fields = \"capital\")  # data for multiple countries can be requested info <- country_info(countries = c(\"Brazil\", \"USA\", \"FR\"), fields = \"capital\")  #' # Data can be returned for all countries by leaving - countries - empty info <- country_info(fields = \"capital\")  # All available fields can be requested by leaving fields empty info <- country_info(countries = c(\"Brazil\", \"USA\", \"FR\"))  # All information for all countries can be downloaded by leaving both arguments empty info <- country_info()  }"},{"path":"https://fbellelli.github.io/countries/reference/country_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert and translate country names — country_name","title":"Convert and translate country names — country_name","text":"function recognises converts country names different nomenclatures languages using fuzzy matching algorithm. country_name() can identify countries even provided mixed formats different languages. robust small misspellings recognises many alternative country names old nomenclatures.","code":""},{"path":"https://fbellelli.github.io/countries/reference/country_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert and translate country names — country_name","text":"","code":"country_name(   x,   to = \"ISO3\",   fuzzy_match = TRUE,   verbose = FALSE,   simplify = TRUE,   poor_matches = FALSE,   na_fill = FALSE,   custom_table = NULL )"},{"path":"https://fbellelli.github.io/countries/reference/country_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert and translate country names — country_name","text":"x vector country names string containing desired naming conventions x converted (e.g. \"ISO3\", \"name_en\", \"UN_fr\", ...). list possible values click refer vignette country names vignette(\"dealing_with_names\"). Default \"ISO3\", converts 249 3-letter country codes currently ISO standard 3166. fuzzy_match Logical value indicating whether fuzzy matching country names allowed (TRUE), exact matches allowed (FALSE). Default TRUE. verbose Logical value indicating whether function print console full report. Default FALSE. simplify Logical value. set TRUE function return vector converted names. set FALSE, function return list object containing converted vector additional details country matching process. Default TRUE. poor_matches Logical value. set FALSE (default), function return NA case poor matching. set TRUE, function always return closest matching country name, even match poor. na_fill Logical value. set TRUE, NA output names filled original country name supplied x. default FALSE (filling). general, NAs produced : 1) country present nomenclature requested (e.g. country_name(\"Abkhazia\", = \"ISO3\")), 2) input country name NA, 3) exact match found user sets option fuzzy_match = FALSE, 4) fuzzy match algorithm find good match user sets option poor_match = FALSE. na_fill argument gives option replace resulting NA original value x. custom_table Custom conversion table used. needs data.frame object. Default NULL.","code":""},{"path":"https://fbellelli.github.io/countries/reference/country_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert and translate country names — country_name","text":"Returns vector converted country names. multiple nomenclatures passed argument , vectors arranged data frame. simplify=FALSE, function return list object.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/country_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert and translate country names — country_name","text":"","code":"#Convert country names to a single nomenclatures: (e.g. 3-letters ISO code) country_name(x=c(\"UK\",\"Estados Unidos\",\"Zaire\",\"C#te d^ivoire\"), to= \"ISO3\") #> [1] \"GBR\" \"USA\" \"COD\" \"CIV\"  #When multiple arguments are provided to the - to - argument, a data frame is returned: country_name(x=c(\"UK\",\"Estados Unidos\",\"Zaire\",\"C#te d^ivoire\"), to= c(\"UN_en\",\"UN_fr\",\"ISO3\")) #>                                                  UN_en #> 1 United Kingdom of Great Britain and Northern Ireland #> 2                             United States of America #> 3                     Democratic Republic of the Congo #> 4                                        Côte d’Ivoire #>                                                 UN_fr ISO3 #> 1 Royaume-Uni de Grande-Bretagne et d’Irlande du Nord  GBR #> 2                               États-Unis d’Amérique  USA #> 3                    République démocratique du Congo  COD #> 4                                       Côte d’Ivoire  CIV  #This function can also be used to translate country names: (e.g. translating all to Chinese) country_name(x=c(\"UK\",\"Estados Unidos\",\"Zaire\",\"C#te d^ivoire\"), to= \"name_zh\") #> [1] \"英国\"           \"美国\"           \"刚果民主共和国\" \"科特迪瓦\""},{"path":"https://fbellelli.github.io/countries/reference/country_reference_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion table — country_reference_list","title":"Conversion table — country_reference_list","text":"table containing country names different naming conventions","code":""},{"path":"https://fbellelli.github.io/countries/reference/country_reference_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion table — country_reference_list","text":"","code":"country_reference_list"},{"path":"https://fbellelli.github.io/countries/reference/country_reference_list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Conversion table — country_reference_list","text":"data frame columns corresponding different country naming conventions. simple Reference name geographic unit. names column contain ASCII characters. nomenclature available countries. ISO3 3-letter country codes defined ISO standard 3166-1 alpha-3. nomenclature available territories standard (currently 249 territories). ISO2 2-letter country codes defined ISO standard 3166-1 alpha-2. nomenclature available territories standard (currently 249 territories). ISO_code Numeric country codes defined ISO standard 3166-1 numeric. country code UN's country number (M49 standard). nomenclature available territories ISO standard (currently 249 countries). UN_ar Official UN name Arabic.  nomenclature available countries M49 standard (currently 249 territories). UN_zh Official UN name Chinese. nomenclature available countries M49 standard (currently 249 territories). UN_en Official UN name English. nomenclature available countries M49 standard (currently 249 territories). UN_fr Official UN name French. nomenclature available countries M49 standard (currently 249 territories). UN_es Official UN name Spanish. nomenclature available countries M49 standard (currently 249 territories). UN_ru Official UN name Russian. nomenclature available countries M49 standard (currently 249 territories). WTO_en Official WTO name English. nomenclature available WTO members observers (currently 189 entities). WTO_fr Official WTO name French. nomenclature available WTO members observers (currently 189 entities). WTO_es Official WTO name Spanish. nomenclature available WTO members observers (currently 189 entities). name_ar Translation ISO country names Arabic. (currently 249 territories) name_bg Translation ISO country names Bulgarian. (currently 249 territories) name_cs Translation ISO country names Czech. (currently 249 territories) name_da Translation ISO country names Danish. (currently 249 territories) name_de Translation ISO country names German. (currently 249 territories) name_el Translation ISO country names Greek. (currently 249 territories) name_en Translation ISO country names English. (currently 249 territories) name_es Translation ISO country names Spanish. (currently 249 territories) name_et Translation ISO country names Estonian. (currently 249 territories) name_eu Translation ISO country names Basque. (currently 249 territories) name_fi Translation ISO country names Finnish. (currently 249 territories) name_fr Translation ISO country names French. (currently 249 territories) name_hu Translation ISO country names Hungarian. (currently 249 territories) name_it Translation ISO country names Italian. (currently 249 territories) name_ja Translation ISO country names Japanese. (currently 249 territories) name_ko Translation ISO country names Korean. (currently 249 territories) name_lt Translation ISO country names Lithuanian. (currently 249 territories) name_nl Translation ISO country names Dutch. (currently 249 territories) name_no Translation ISO country names Norwegian. (currently 249 territories) name_pl Translation ISO country names Polish. (currently 249 territories) name_pt Translation ISO country names Portuguese. (currently 249 territories) name_ro Translation ISO country names Romanian. (currently 249 territories) name_ru Translation ISO country names Russian. (currently 249 territories) name_sk Translation ISO country names Slovak. (currently 249 territories) name_sv Translation ISO country names Swedish. (currently 249 territories) name_th Translation ISO country names Thai. (currently 249 territories) name_uk Translation ISO country names Ukranian. (currently 249 territories) name_zh Translation ISO country names simplified Chinese. (currently 249 territories) name_zh-tw Translation ISO country names traditional Chinese. (currently 249 territories) GTAP GTAP country region codes. Name0 variants country name included improve matching process Name1 variants country name included improve matching process Name2 variants country name included improve matching process Name3 variants country name included improve matching process Name4 variants country name included improve matching process Name5 variants country name included improve matching process Name6 variants country name included improve matching process Name7 variants country name included improve matching process Name8 variants country name included improve matching process Name9 variants country name included improve matching process Name10 variants country name included improve matching process Name11 variants country name included improve matching process Name12 variants country name included improve matching process Name13 variants country name included improve matching process Name14 variants country name included improve matching process Name15 variants country name included improve matching process Name16 variants country name included improve matching process Name17 variants country name included improve matching process Name18 variants country name included improve matching process Name19 variants country name included improve matching process","code":""},{"path":"https://fbellelli.github.io/countries/reference/country_reference_list_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion table in long format — country_reference_list_long","title":"Conversion table in long format — country_reference_list_long","text":"table containing country names different naming conventions","code":""},{"path":"https://fbellelli.github.io/countries/reference/country_reference_list_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion table in long format — country_reference_list_long","text":"","code":"country_reference_list_long"},{"path":"https://fbellelli.github.io/countries/reference/country_reference_list_long.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Conversion table in long format — country_reference_list_long","text":"data frame three columns providing information country naming conventions. table long-format version \"country_reference_list\". ID Numeric value uniquely identifies entity. corresponds row number table \"country_reference_list\". nomenclature Country naming convention (e.g. UN english, ISO 3-digit code, etc.). name Country names","code":""},{"path":"https://fbellelli.github.io/countries/reference/find_countrycol.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds columns containing country names — find_countrycol","title":"Finds columns containing country names — find_countrycol","text":"function takes data frame argument returns column name (index) columns containing country names. can used automate search country columns data frames. purpose function, country 249 territories designated ISO standard 3166. large datasets random sample used evaluating columns.","code":""},{"path":"https://fbellelli.github.io/countries/reference/find_countrycol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds columns containing country names — find_countrycol","text":"","code":"find_countrycol(   x,   return_index = FALSE,   allow_NA = TRUE,   min_share = 0.6,   sample_size = 1000 )"},{"path":"https://fbellelli.github.io/countries/reference/find_countrycol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds columns containing country names — find_countrycol","text":"x data frame object return_index logical value indicating whether function return index country columns instead column names. Default FALSE, column names returned. allow_NA Logical value indicating whether columns containing NA values considered country columns. Default allow_NA=FALSE, function return country column containing NA values. min_share value 0 1 indicating minimum share country names columns returned. value 0 return column containing country name. value 1 return columns whose entries country names. Default 0.6, .e. least 60 percent column entries need country names. sample_size Either NA numeric value indicating sample size used evaluating columns. Default 1000. NA passed, function evaluate full table. minimum accepted value 100 (.e. 100 randomly sampled rows used evaluate columns). parameter can tuned speed computation long datasets. Taking sample result inexact identification key columns, accuracy improves larger samples.","code":""},{"path":"https://fbellelli.github.io/countries/reference/find_countrycol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds columns containing country names — find_countrycol","text":"Returns vector country names (return_index=FALSE) column indices (return_index=TRUE) columns containing country names.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/find_countrycol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finds columns containing country names — find_countrycol","text":"","code":"find_countrycol(x=data.frame(a=c(\"Brésil\",\"Tonga\",\"FRA\"), b=c(1,2,3))) #> [1] \"a\""},{"path":"https://fbellelli.github.io/countries/reference/find_keycol.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a set of columns that uniquely identifies table entries — find_keycol","title":"Find a set of columns that uniquely identifies table entries — find_keycol","text":"function takes data frame argument returns column names (indices) set columns uniquely identify table entries (.e. table key). can used automate search table keys. Since function designed country data, first search columns containing country names dates/years. columns given priority search keys. Next, function prioritises left-columns table. time efficiency, function test possible combination columns, just tests likely combinations. function look common country data formats (e.g. cross-sectional, time-series, panel data, dyadic, etc.) searches 2 additional key columns beyond country time columns.","code":""},{"path":"https://fbellelli.github.io/countries/reference/find_keycol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a set of columns that uniquely identifies table entries — find_keycol","text":"","code":"find_keycol(   x,   return_index = FALSE,   search_only = NA,   sample_size = 1000,   allow_NA = FALSE )"},{"path":"https://fbellelli.github.io/countries/reference/find_keycol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a set of columns that uniquely identifies table entries — find_keycol","text":"x data frame object return_index logical value indicating whether function return index country columns instead column names. Default FALSE, column names returned. search_only parameter can used restrict search table keys subset columns. default NA, result entire table searched. Alternatively, users may restrict search providing vector containing name numeric index columns check. example, search restricted first ten columns passing 1:10. useful speeding search wide tables. sample_size Either NA numeric value indicating sample size used evaluating columns. Default 1000. NA passed, function evaluate full table. minimum accepted value 100 (.e. 100 randomly sampled rows used evaluate columns). parameter can tuned speed computation long datasets. Taking sample result inexact identification key columns, accuracy improves larger samples. allow_NA Logical value indicating whether allow key columns NA values. Default allow_NA=FALSE. set TRUE, NA considered distinct value.","code":""},{"path":"https://fbellelli.github.io/countries/reference/find_keycol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a set of columns that uniquely identifies table entries — find_keycol","text":"Returns vector column names (indices) uniquely identify entries table. key found, function return NULL. output named vector indicating whether identified key columns contain country names (\"country\"), year dates (\"time\"), type information (\"\").","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/find_keycol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a set of columns that uniquely identifies table entries — find_keycol","text":"","code":"example <-data.frame(nation=rep(c(\"FRA\",\"ALB\",\"JOR\"),3),                      year=c(rep(2000,3),rep(2005,3),rep(2010,3)),                      var=runif(9)) find_keycol(x=example) #>  country     time  #> \"nation\"   \"year\""},{"path":"https://fbellelli.github.io/countries/reference/find_timecol.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds columns containing date and year data — find_timecol","title":"Finds columns containing date and year data — find_timecol","text":"function takes data frame argument returns column names (indices) columns containing dates likely column containing year information, . can used automate search date year columns data frames.","code":""},{"path":"https://fbellelli.github.io/countries/reference/find_timecol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds columns containing date and year data — find_timecol","text":"","code":"find_timecol(x, return_index = FALSE, allow_NA = TRUE, sample_size = 1000)"},{"path":"https://fbellelli.github.io/countries/reference/find_timecol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds columns containing date and year data — find_timecol","text":"x data frame object return_index logical value indicating whether function return index time columns instead column names. Default FALSE, column names returned. allow_NA Logical value indicating whether allow time columns contain NA values. Default allow_NA=FALSE, function return time column containing NA values. sample_size Either NA numeric value indicating sample size used evaluating columns. Default 1000. NA passed, function evaluate full table. minimum accepted value 100 (.e. 100 randomly sampled rows used evaluate columns). parameter can tuned speed computation long datasets. Taking sample result inexact identification key columns, accuracy improves larger samples.","code":""},{"path":"https://fbellelli.github.io/countries/reference/find_timecol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds columns containing date and year data — find_timecol","text":"Returns vector names (return_index=FALSE) indices (return_index=TRUE) columns containing date year information. likely year column returned.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/find_timecol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finds columns containing date and year data — find_timecol","text":"","code":"find_timecol(x=data.frame(a=1970:2020, year=1970:2020, b=rep(\"2020-01-01\",51),c=sample(1:1000,51))) #> [1] \"year\" \"b\""},{"path":"https://fbellelli.github.io/countries/reference/get_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the mode of a vector — get_mode","title":"Get the mode of a vector — get_mode","text":"function returns mode distribution. given vector values, returns value appears frequently. function works strings, numerical mixed inputs. NA values treated distinct value.","code":""},{"path":"https://fbellelli.github.io/countries/reference/get_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the mode of a vector — get_mode","text":"","code":"get_mode(x, first_only = FALSE)"},{"path":"https://fbellelli.github.io/countries/reference/get_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the mode of a vector — get_mode","text":"x vector first_only Logical value indicating whether first mode returned x multiple modes (.e. multiple values highest number observations). Default FALSE.","code":""},{"path":"https://fbellelli.github.io/countries/reference/get_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the mode of a vector — get_mode","text":"Returns mode vector x","code":""},{"path":"https://fbellelli.github.io/countries/reference/get_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the mode of a vector — get_mode","text":"","code":"get_mode(c(\"a\",\"a\",2,3)) #> [1] \"a\" get_mode(c(1,1,2,3,NA,2)) #> [1] 1 2"},{"path":"https://fbellelli.github.io/countries/reference/has.invalid.multibyte.string.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function - Determine if ","title":"Internal function - Determine if ","text":"Internal function - Determine \"invalid multibyte string\" error triggered due wrong encoding.","code":""},{"path":"https://fbellelli.github.io/countries/reference/has.invalid.multibyte.string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function - Determine if ","text":"","code":"has.invalid.multibyte.string(x, return.elements = FALSE)"},{"path":"https://fbellelli.github.io/countries/reference/has.invalid.multibyte.string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function - Determine if ","text":"x String vector tested return.elements Logical value. `TRUE`, function returns logical value element x, otherwise single logical returned entire vector.","code":""},{"path":"https://fbellelli.github.io/countries/reference/is.date.html","id":null,"dir":"Reference","previous_headings":"","what":"internal function - Tests whether the value is convertible to a date format — is.date","title":"internal function - Tests whether the value is convertible to a date format — is.date","text":"Internal function behind is_date().","code":""},{"path":"https://fbellelli.github.io/countries/reference/is.date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"internal function - Tests whether the value is convertible to a date format — is.date","text":"","code":"is.date(x, formats)"},{"path":"https://fbellelli.github.io/countries/reference/is.date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"internal function - Tests whether the value is convertible to a date format — is.date","text":"x vector length 1 tested formats Formats check expressed standard notation.","code":""},{"path":"https://fbellelli.github.io/countries/reference/is.date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"internal function - Tests whether the value is convertible to a date format — is.date","text":"Returns logical value indicating whether value can converted date formats provided. function basis countries::is_date().","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/is.date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"internal function - Tests whether the value is convertible to a date format — is.date","text":"","code":"is.date(\"2020-01-01\") #> Error in is.date(\"2020-01-01\"): could not find function \"is.date\" is.yearcol(\"a\") #> Error in is.yearcol(\"a\"): could not find function \"is.yearcol\""},{"path":"https://fbellelli.github.io/countries/reference/is.yearcol.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function - Tests whether a vector of data could be containing year information — is.yearcol","title":"Internal function - Tests whether a vector of data could be containing year information — is.yearcol","text":"Internal function - Tests whether vector data containing year information","code":""},{"path":"https://fbellelli.github.io/countries/reference/is.yearcol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function - Tests whether a vector of data could be containing year information — is.yearcol","text":"","code":"is.yearcol(x, limit = c(1800, 2200), regularity = FALSE, allow_NA = TRUE)"},{"path":"https://fbellelli.github.io/countries/reference/is.yearcol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function - Tests whether a vector of data could be containing year information — is.yearcol","text":"x vector tested limit minimum maximum year value c(1800,2200) regularity Require gap present year values (e.g. 2005, 2000, 2010, 2020 return FALSE 2015 missing). Default FALSE (regularity required). allow_NA set true date vector allowed contain NA values. set FALSE function returns FALSE value NA. Default TRUE.","code":""},{"path":"https://fbellelli.github.io/countries/reference/is.yearcol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function - Tests whether a vector of data could be containing year information — is.yearcol","text":"Returns logical vector indicating whether vector containing year information","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/is.yearcol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal function - Tests whether a vector of data could be containing year information — is.yearcol","text":"","code":"countries:::is.yearcol(1990:2020) #> [1] TRUE countries:::is.yearcol(c(\"a\",2000)) #> [1] FALSE"},{"path":"https://fbellelli.github.io/countries/reference/is_country.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests whether a string is a country name — is_country","title":"Tests whether a string is a country name — is_country","text":"function checks whether string country name. supports different languages naming conventions. function returns TRUE relates one 249 countries currently ISO standard 3166. Alternatively, argument check_for allows narrow test subset countries. Fuzzy matching can used allow small margin error string.","code":""},{"path":"https://fbellelli.github.io/countries/reference/is_country.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests whether a string is a country name — is_country","text":"","code":"is_country(x, check_for = NULL, fuzzy_match = FALSE)"},{"path":"https://fbellelli.github.io/countries/reference/is_country.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests whether a string is a country name — is_country","text":"x character vector tested (also supports UN/ISO country codes) check_for vector country names narrow testing. function return TRUE string relates country vector. Default NULL. fuzzy_match logical value indicating whether tolerate small discrepancies country name matching. default fastest option FALSE.","code":""},{"path":"https://fbellelli.github.io/countries/reference/is_country.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests whether a string is a country name — is_country","text":"Returns logical vector indicating whether string country name","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/is_country.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests whether a string is a country name — is_country","text":"","code":"#Detect strings that are country names is_country(x=c(\"ITA\",\"Estados Unidos\",\"Estado Unidos\",\"bungalow\",\"dog\",542), fuzzy_match=FALSE) #> [1]  TRUE  TRUE FALSE FALSE FALSE FALSE is_country(x=c(\"ITA\",\"Estados Unidos\",\"Estado Unidos\",\"bungalow\",\"dog\",542), fuzzy_match=TRUE) #> [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE #Checking for a specific subset of countries is_country(x=c(\"Ceylon\",\"LKA\",\"Indonesia\",\"Inde\"), check_for=c(\"India\",\"Sri Lanka\")) #> [1]  TRUE  TRUE FALSE  TRUE"},{"path":"https://fbellelli.github.io/countries/reference/is_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether the input is a date — is_date","title":"Test whether the input is a date — is_date","text":"function checks value date attempting convert date format. user can specify date formats tested argument formats.","code":""},{"path":"https://fbellelli.github.io/countries/reference/is_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether the input is a date — is_date","text":"","code":"is_date(   x,   formats = c(\"%Y-%m-%d\", \"%y-%m-%d\", \"%m-%d-%Y\", \"%m-%d-%y\", \"%d-%m-%Y\",     \"%d-%m-%y\", \"%Y/%m/%d\", \"%y/%m/%d\", \"%m/%d/%Y\", \"%m/%d/%y\",     \"%d/%m/%Y\", \"%d/%m/%y\", \"%Y.%m.%d\", \"%y.%m.%d\", \"%m.%d.%Y\",     \"%m.%d.%y\", \"%d.%m.%Y\", \"%d.%m.%y\", \"%d %b %Y\", \"%d %B %Y\",     \"%b %d %Y\", \"%B %d %Y\", \"%b %d, %Y\", \"%B %d, %Y\", \"%d%b%Y\",     \"%d%B%Y\", \"%Y%B%d\", \"%Y%b%d\", \"%b %Y\", \"%B %Y\", \"%b %y\", \"%B %y\",     \"%m-%Y\", \"%Y-%m\", \"%m/%Y\", \"%Y/%m\") )"},{"path":"https://fbellelli.github.io/countries/reference/is_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether the input is a date — is_date","text":"x vector values tested formats Date formats checked (expressed R date notation).","code":""},{"path":"https://fbellelli.github.io/countries/reference/is_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether the input is a date — is_date","text":"Returns logical vector indicating whether values can converted date formats provided. Notice unless specified, default allowed formats include simple year numbers (e.g. 2022 1993) number vectors wrongly identified dates. Also, notice testing NA values return FALSE.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/is_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test whether the input is a date — is_date","text":"","code":"is_date(c(\"2020-01-01\",\"test\",2020,\"March 2030\")) #> [1]  TRUE FALSE FALSE  TRUE"},{"path":"https://fbellelli.github.io/countries/reference/is_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Test wheter a set of column could be a data frame key — is_key","title":"Test wheter a set of column could be a data frame key — is_key","text":"function takes data frame vector column names argument returns logical value indicating whether indicated columns uniquely identify entries data frame. output TRUE, indicated columns keys table.","code":""},{"path":"https://fbellelli.github.io/countries/reference/is_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test wheter a set of column could be a data frame key — is_key","text":"","code":"is_key(x, cols, allow_NA = FALSE, verbose = TRUE)"},{"path":"https://fbellelli.github.io/countries/reference/is_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test wheter a set of column could be a data frame key — is_key","text":"x data frame object cols vector column names tested. allow_NA Logical value indicating whether allow columns NA values. Default allow_NA=FALSE, function return FALSE NA value present colnames. verbose Logical value indicating whether messages printed console. Default TRUE.","code":""},{"path":"https://fbellelli.github.io/countries/reference/is_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test wheter a set of column could be a data frame key — is_key","text":"Returns logical value. TRUE, columns indicated colnames uniquely identify entries x.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/is_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test wheter a set of column could be a data frame key — is_key","text":"","code":"is_key(data.frame(a=1:10,b=sample(c(\"a\",\"b\",\"c\"),10, replace=TRUE)), cols=\"a\") #> [1] TRUE is_key(data.frame(a=1:10,b=sample(c(\"a\",\"b\",\"c\"),10, replace=TRUE)), cols=\"b\") #> [1] FALSE is_key(data.frame(a=c(1:5,1:5),b=sample(c(\"a\",\"b\",\"c\"),10, replace=TRUE), c=c(rep(\"a\",5),rep(\"b\",5))), cols=c(\"a\",\"c\")) #> [1] TRUE"},{"path":"https://fbellelli.github.io/countries/reference/is_keycol.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether a set of column could be a data frame key — is_keycol","title":"Test whether a set of column could be a data frame key — is_keycol","text":"function takes data frame vector column names argument returns logical value indicating whether indicated columns uniquely identify entries data frame. output TRUE, indicated columns keys table.","code":""},{"path":"https://fbellelli.github.io/countries/reference/is_keycol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether a set of column could be a data frame key — is_keycol","text":"","code":"is_keycol(x, cols, allow_NA = FALSE, verbose = TRUE)"},{"path":"https://fbellelli.github.io/countries/reference/is_keycol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether a set of column could be a data frame key — is_keycol","text":"x data frame object cols vector column names indices tested. allow_NA Logical value indicating whether allow key columns NA values. Default allow_NA=FALSE, function return FALSE NA value present colnames. verbose Logical value indicating whether messages printed console. Default TRUE.","code":""},{"path":"https://fbellelli.github.io/countries/reference/is_keycol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether a set of column could be a data frame key — is_keycol","text":"Returns logical value. TRUE, columns indicated colnames uniquely identify entries x.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/is_keycol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test whether a set of column could be a data frame key — is_keycol","text":"","code":"is_keycol(data.frame(a=1:10,b=sample(c(\"a\",\"b\",\"c\"),10, replace=TRUE)), cols=\"a\") #> [1] TRUE is_keycol(data.frame(a=1:10,b=sample(c(\"a\",\"b\",\"c\"),10, replace=TRUE)), cols=\"b\") #> [1] FALSE is_keycol( data.frame(a=c(1:5,1:5), b=sample(c(\"a\",\"b\",\"c\"),10, replace=TRUE), c=c(rep(\"a\",5),rep(\"b\",5))), cols=c(\"a\",\"c\")) #> [1] TRUE"},{"path":"https://fbellelli.github.io/countries/reference/list_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a list of country names — list_countries","title":"Get a list of country names — list_countries","text":"function returns vector country names different nomenclatures.","code":""},{"path":"https://fbellelli.github.io/countries/reference/list_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a list of country names — list_countries","text":"","code":"list_countries(nomenclature = \"name_en\")"},{"path":"https://fbellelli.github.io/countries/reference/list_countries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a list of country names — list_countries","text":"nomenclature String indicating nomenclature list countries taken. countries present nomenclatures, example Taiwan recognised UN, returned \"WTO_en\". function accepts nomenclatures supported country_name. list accepted values, refer page. default name_en, English list names ISO standard 3166.","code":""},{"path":"https://fbellelli.github.io/countries/reference/list_countries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a list of country names — list_countries","text":"vector country names desired nomenclature.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/list_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a list of country names — list_countries","text":"","code":"list_countries(\"ISO3\") #>   [1] \"AFG\" \"ALA\" \"ALB\" \"DZA\" \"ASM\" \"AND\" \"AGO\" \"AIA\" \"ATA\" \"ATG\" \"ARG\" \"ARM\" #>  [13] \"ABW\" \"AUS\" \"AUT\" \"AZE\" \"BHS\" \"BHR\" \"BGD\" \"BRB\" \"BLR\" \"BEL\" \"BLZ\" \"BEN\" #>  [25] \"BMU\" \"BTN\" \"BOL\" \"BES\" \"BIH\" \"BWA\" \"BVT\" \"BRA\" \"IOT\" \"VGB\" \"BRN\" \"BGR\" #>  [37] \"BFA\" \"BDI\" \"CPV\" \"KHM\" \"CMR\" \"CAN\" \"CYM\" \"CAF\" \"TCD\" \"CHL\" \"CHN\" \"HKG\" #>  [49] \"MAC\" \"CXR\" \"CCK\" \"COL\" \"COM\" \"COG\" \"COK\" \"CRI\" \"CIV\" \"HRV\" \"CUB\" \"CUW\" #>  [61] \"CYP\" \"CZE\" \"PRK\" \"COD\" \"DNK\" \"DJI\" \"DMA\" \"DOM\" \"ECU\" \"EGY\" \"SLV\" \"GNQ\" #>  [73] \"ERI\" \"EST\" \"SWZ\" \"ETH\" \"FLK\" \"FRO\" \"FJI\" \"FIN\" \"FRA\" \"GUF\" \"PYF\" \"ATF\" #>  [85] \"GAB\" \"GMB\" \"GEO\" \"DEU\" \"GHA\" \"GIB\" \"GRC\" \"GRL\" \"GRD\" \"GLP\" \"GUM\" \"GTM\" #>  [97] \"GGY\" \"GIN\" \"GNB\" \"GUY\" \"HTI\" \"HMD\" \"VAT\" \"HND\" \"HUN\" \"ISL\" \"IND\" \"IDN\" #> [109] \"IRN\" \"IRQ\" \"IRL\" \"IMN\" \"ISR\" \"ITA\" \"JAM\" \"JPN\" \"JEY\" \"JOR\" \"KAZ\" \"KEN\" #> [121] \"KIR\" \"KWT\" \"KGZ\" \"LAO\" \"LVA\" \"LBN\" \"LSO\" \"LBR\" \"LBY\" \"LIE\" \"LTU\" \"LUX\" #> [133] \"MDG\" \"MWI\" \"MYS\" \"MDV\" \"MLI\" \"MLT\" \"MHL\" \"MTQ\" \"MRT\" \"MUS\" \"MYT\" \"MEX\" #> [145] \"FSM\" \"MCO\" \"MNG\" \"MNE\" \"MSR\" \"MAR\" \"MOZ\" \"MMR\" \"NAM\" \"NRU\" \"NPL\" \"NLD\" #> [157] \"NCL\" \"NZL\" \"NIC\" \"NER\" \"NGA\" \"NIU\" \"NFK\" \"MKD\" \"MNP\" \"NOR\" \"OMN\" \"PAK\" #> [169] \"PLW\" \"PAN\" \"PNG\" \"PRY\" \"PER\" \"PHL\" \"PCN\" \"POL\" \"PRT\" \"PRI\" \"QAT\" \"KOR\" #> [181] \"MDA\" \"REU\" \"ROU\" \"RUS\" \"RWA\" \"BLM\" \"SHN\" \"KNA\" \"LCA\" \"MAF\" \"SPM\" \"VCT\" #> [193] \"WSM\" \"SMR\" \"STP\" \"SAU\" \"SEN\" \"SRB\" \"SYC\" \"SLE\" \"SGP\" \"SXM\" \"SVK\" \"SVN\" #> [205] \"SLB\" \"SOM\" \"ZAF\" \"SGS\" \"SSD\" \"ESP\" \"LKA\" \"PSE\" \"SDN\" \"SUR\" \"SJM\" \"SWE\" #> [217] \"CHE\" \"SYR\" \"TJK\" \"THA\" \"TLS\" \"TGO\" \"TKL\" \"TON\" \"TTO\" \"TUN\" \"TUR\" \"TKM\" #> [229] \"TCA\" \"TUV\" \"UGA\" \"UKR\" \"ARE\" \"GBR\" \"TZA\" \"UMI\" \"USA\" \"VIR\" \"URY\" \"UZB\" #> [241] \"VUT\" \"VEN\" \"VNM\" \"WLF\" \"ESH\" \"YEM\" \"ZMB\" \"ZWE\" \"TWN\" list_countries(\"UN_en\") #>   [1] \"Afghanistan\"                                          #>   [2] \"Åland Islands\"                                        #>   [3] \"Albania\"                                              #>   [4] \"Algeria\"                                              #>   [5] \"American Samoa\"                                       #>   [6] \"Andorra\"                                              #>   [7] \"Angola\"                                               #>   [8] \"Anguilla\"                                             #>   [9] \"Antarctica\"                                           #>  [10] \"Antigua and Barbuda\"                                  #>  [11] \"Argentina\"                                            #>  [12] \"Armenia\"                                              #>  [13] \"Aruba\"                                                #>  [14] \"Australia\"                                            #>  [15] \"Austria\"                                              #>  [16] \"Azerbaijan\"                                           #>  [17] \"Bahamas\"                                              #>  [18] \"Bahrain\"                                              #>  [19] \"Bangladesh\"                                           #>  [20] \"Barbados\"                                             #>  [21] \"Belarus\"                                              #>  [22] \"Belgium\"                                              #>  [23] \"Belize\"                                               #>  [24] \"Benin\"                                                #>  [25] \"Bermuda\"                                              #>  [26] \"Bhutan\"                                               #>  [27] \"Bolivia (Plurinational State of)\"                     #>  [28] \"Bonaire, Sint Eustatius and Saba\"                     #>  [29] \"Bosnia and Herzegovina\"                               #>  [30] \"Botswana\"                                             #>  [31] \"Bouvet Island\"                                        #>  [32] \"Brazil\"                                               #>  [33] \"British Indian Ocean Territory\"                       #>  [34] \"British Virgin Islands\"                               #>  [35] \"Brunei Darussalam\"                                    #>  [36] \"Bulgaria\"                                             #>  [37] \"Burkina Faso\"                                         #>  [38] \"Burundi\"                                              #>  [39] \"Cabo Verde\"                                           #>  [40] \"Cambodia\"                                             #>  [41] \"Cameroon\"                                             #>  [42] \"Canada\"                                               #>  [43] \"Cayman Islands\"                                       #>  [44] \"Central African Republic\"                             #>  [45] \"Chad\"                                                 #>  [46] \"Chile\"                                                #>  [47] \"China\"                                                #>  [48] \"China, Hong Kong Special Administrative Region\"       #>  [49] \"China, Macao Special Administrative Region\"           #>  [50] \"Christmas Island\"                                     #>  [51] \"Cocos (Keeling) Islands\"                              #>  [52] \"Colombia\"                                             #>  [53] \"Comoros\"                                              #>  [54] \"Congo\"                                                #>  [55] \"Cook Islands\"                                         #>  [56] \"Costa Rica\"                                           #>  [57] \"Côte d’Ivoire\"                                        #>  [58] \"Croatia\"                                              #>  [59] \"Cuba\"                                                 #>  [60] \"Curaçao\"                                              #>  [61] \"Cyprus\"                                               #>  [62] \"Czechia\"                                              #>  [63] \"Democratic People's Republic of Korea\"                #>  [64] \"Democratic Republic of the Congo\"                     #>  [65] \"Denmark\"                                              #>  [66] \"Djibouti\"                                             #>  [67] \"Dominica\"                                             #>  [68] \"Dominican Republic\"                                   #>  [69] \"Ecuador\"                                              #>  [70] \"Egypt\"                                                #>  [71] \"El Salvador\"                                          #>  [72] \"Equatorial Guinea\"                                    #>  [73] \"Eritrea\"                                              #>  [74] \"Estonia\"                                              #>  [75] \"Eswatini\"                                             #>  [76] \"Ethiopia\"                                             #>  [77] \"Falkland Islands (Malvinas)\"                          #>  [78] \"Faroe Islands\"                                        #>  [79] \"Fiji\"                                                 #>  [80] \"Finland\"                                              #>  [81] \"France\"                                               #>  [82] \"French Guiana\"                                        #>  [83] \"French Polynesia\"                                     #>  [84] \"French Southern Territories\"                          #>  [85] \"Gabon\"                                                #>  [86] \"Gambia\"                                               #>  [87] \"Georgia\"                                              #>  [88] \"Germany\"                                              #>  [89] \"Ghana\"                                                #>  [90] \"Gibraltar\"                                            #>  [91] \"Greece\"                                               #>  [92] \"Greenland\"                                            #>  [93] \"Grenada\"                                              #>  [94] \"Guadeloupe\"                                           #>  [95] \"Guam\"                                                 #>  [96] \"Guatemala\"                                            #>  [97] \"Guernsey\"                                             #>  [98] \"Guinea\"                                               #>  [99] \"Guinea-Bissau\"                                        #> [100] \"Guyana\"                                               #> [101] \"Haiti\"                                                #> [102] \"Heard Island and McDonald Islands\"                    #> [103] \"Holy See\"                                             #> [104] \"Honduras\"                                             #> [105] \"Hungary\"                                              #> [106] \"Iceland\"                                              #> [107] \"India\"                                                #> [108] \"Indonesia\"                                            #> [109] \"Iran (Islamic Republic of)\"                           #> [110] \"Iraq\"                                                 #> [111] \"Ireland\"                                              #> [112] \"Isle of Man\"                                          #> [113] \"Israel\"                                               #> [114] \"Italy\"                                                #> [115] \"Jamaica\"                                              #> [116] \"Japan\"                                                #> [117] \"Jersey\"                                               #> [118] \"Jordan\"                                               #> [119] \"Kazakhstan\"                                           #> [120] \"Kenya\"                                                #> [121] \"Kiribati\"                                             #> [122] \"Kuwait\"                                               #> [123] \"Kyrgyzstan\"                                           #> [124] \"Lao People's Democratic Republic\"                     #> [125] \"Latvia\"                                               #> [126] \"Lebanon\"                                              #> [127] \"Lesotho\"                                              #> [128] \"Liberia\"                                              #> [129] \"Libya\"                                                #> [130] \"Liechtenstein\"                                        #> [131] \"Lithuania\"                                            #> [132] \"Luxembourg\"                                           #> [133] \"Madagascar\"                                           #> [134] \"Malawi\"                                               #> [135] \"Malaysia\"                                             #> [136] \"Maldives\"                                             #> [137] \"Mali\"                                                 #> [138] \"Malta\"                                                #> [139] \"Marshall Islands\"                                     #> [140] \"Martinique\"                                           #> [141] \"Mauritania\"                                           #> [142] \"Mauritius\"                                            #> [143] \"Mayotte\"                                              #> [144] \"Mexico\"                                               #> [145] \"Micronesia (Federated States of)\"                     #> [146] \"Monaco\"                                               #> [147] \"Mongolia\"                                             #> [148] \"Montenegro\"                                           #> [149] \"Montserrat\"                                           #> [150] \"Morocco\"                                              #> [151] \"Mozambique\"                                           #> [152] \"Myanmar\"                                              #> [153] \"Namibia\"                                              #> [154] \"Nauru\"                                                #> [155] \"Nepal\"                                                #> [156] \"Netherlands\"                                          #> [157] \"New Caledonia\"                                        #> [158] \"New Zealand\"                                          #> [159] \"Nicaragua\"                                            #> [160] \"Niger\"                                                #> [161] \"Nigeria\"                                              #> [162] \"Niue\"                                                 #> [163] \"Norfolk Island\"                                       #> [164] \"North Macedonia\"                                      #> [165] \"Northern Mariana Islands\"                             #> [166] \"Norway\"                                               #> [167] \"Oman\"                                                 #> [168] \"Pakistan\"                                             #> [169] \"Palau\"                                                #> [170] \"Panama\"                                               #> [171] \"Papua New Guinea\"                                     #> [172] \"Paraguay\"                                             #> [173] \"Peru\"                                                 #> [174] \"Philippines\"                                          #> [175] \"Pitcairn\"                                             #> [176] \"Poland\"                                               #> [177] \"Portugal\"                                             #> [178] \"Puerto Rico\"                                          #> [179] \"Qatar\"                                                #> [180] \"Republic of Korea\"                                    #> [181] \"Republic of Moldova\"                                  #> [182] \"Réunion\"                                              #> [183] \"Romania\"                                              #> [184] \"Russian Federation\"                                   #> [185] \"Rwanda\"                                               #> [186] \"Saint Barthélemy\"                                     #> [187] \"Saint Helena\"                                         #> [188] \"Saint Kitts and Nevis\"                                #> [189] \"Saint Lucia\"                                          #> [190] \"Saint Martin (French Part)\"                           #> [191] \"Saint Pierre and Miquelon\"                            #> [192] \"Saint Vincent and the Grenadines\"                     #> [193] \"Samoa\"                                                #> [194] \"San Marino\"                                           #> [195] \"Sao Tome and Principe\"                                #> [196] \"Saudi Arabia\"                                         #> [197] \"Senegal\"                                              #> [198] \"Serbia\"                                               #> [199] \"Seychelles\"                                           #> [200] \"Sierra Leone\"                                         #> [201] \"Singapore\"                                            #> [202] \"Sint Maarten (Dutch part)\"                            #> [203] \"Slovakia\"                                             #> [204] \"Slovenia\"                                             #> [205] \"Solomon Islands\"                                      #> [206] \"Somalia\"                                              #> [207] \"South Africa\"                                         #> [208] \"South Georgia and the South Sandwich Islands\"         #> [209] \"South Sudan\"                                          #> [210] \"Spain\"                                                #> [211] \"Sri Lanka\"                                            #> [212] \"State of Palestine\"                                   #> [213] \"Sudan\"                                                #> [214] \"Suriname\"                                             #> [215] \"Svalbard and Jan Mayen Islands\"                       #> [216] \"Sweden\"                                               #> [217] \"Switzerland\"                                          #> [218] \"Syrian Arab Republic\"                                 #> [219] \"Tajikistan\"                                           #> [220] \"Thailand\"                                             #> [221] \"Timor-Leste\"                                          #> [222] \"Togo\"                                                 #> [223] \"Tokelau\"                                              #> [224] \"Tonga\"                                                #> [225] \"Trinidad and Tobago\"                                  #> [226] \"Tunisia\"                                              #> [227] \"Türkiye\"                                              #> [228] \"Turkmenistan\"                                         #> [229] \"Turks and Caicos Islands\"                             #> [230] \"Tuvalu\"                                               #> [231] \"Uganda\"                                               #> [232] \"Ukraine\"                                              #> [233] \"United Arab Emirates\"                                 #> [234] \"United Kingdom of Great Britain and Northern Ireland\" #> [235] \"United Republic of Tanzania\"                          #> [236] \"United States Minor Outlying Islands\"                 #> [237] \"United States of America\"                             #> [238] \"United States Virgin Islands\"                         #> [239] \"Uruguay\"                                              #> [240] \"Uzbekistan\"                                           #> [241] \"Vanuatu\"                                              #> [242] \"Venezuela (Bolivarian Republic of)\"                   #> [243] \"Viet Nam\"                                             #> [244] \"Wallis and Futuna Islands\"                            #> [245] \"Western Sahara\"                                       #> [246] \"Yemen\"                                                #> [247] \"Zambia\"                                               #> [248] \"Zimbabwe\"                                             list_countries() #>   [1] \"Afghanistan\"                                          #>   [2] \"Åland Islands\"                                        #>   [3] \"Albania\"                                              #>   [4] \"Algeria\"                                              #>   [5] \"American Samoa\"                                       #>   [6] \"Andorra\"                                              #>   [7] \"Angola\"                                               #>   [8] \"Anguilla\"                                             #>   [9] \"Antarctica\"                                           #>  [10] \"Antigua and Barbuda\"                                  #>  [11] \"Argentina\"                                            #>  [12] \"Armenia\"                                              #>  [13] \"Aruba\"                                                #>  [14] \"Australia\"                                            #>  [15] \"Austria\"                                              #>  [16] \"Azerbaijan\"                                           #>  [17] \"Bahamas\"                                              #>  [18] \"Bahrain\"                                              #>  [19] \"Bangladesh\"                                           #>  [20] \"Barbados\"                                             #>  [21] \"Belarus\"                                              #>  [22] \"Belgium\"                                              #>  [23] \"Belize\"                                               #>  [24] \"Benin\"                                                #>  [25] \"Bermuda\"                                              #>  [26] \"Bhutan\"                                               #>  [27] \"Bolivia (Plurinational State of)\"                     #>  [28] \"Bonaire, Sint Eustatius and Saba\"                     #>  [29] \"Bosnia and Herzegovina\"                               #>  [30] \"Botswana\"                                             #>  [31] \"Bouvet Island\"                                        #>  [32] \"Brazil\"                                               #>  [33] \"British Indian Ocean Territory\"                       #>  [34] \"Virgin Islands (British)\"                             #>  [35] \"Brunei Darussalam\"                                    #>  [36] \"Bulgaria\"                                             #>  [37] \"Burkina Faso\"                                         #>  [38] \"Burundi\"                                              #>  [39] \"Cabo Verde\"                                           #>  [40] \"Cambodia\"                                             #>  [41] \"Cameroon\"                                             #>  [42] \"Canada\"                                               #>  [43] \"Cayman Islands\"                                       #>  [44] \"Central African Republic\"                             #>  [45] \"Chad\"                                                 #>  [46] \"Chile\"                                                #>  [47] \"China\"                                                #>  [48] \"Hong Kong\"                                            #>  [49] \"Macao\"                                                #>  [50] \"Christmas Island\"                                     #>  [51] \"Cocos (Keeling) Islands\"                              #>  [52] \"Colombia\"                                             #>  [53] \"Comoros\"                                              #>  [54] \"Congo\"                                                #>  [55] \"Cook Islands\"                                         #>  [56] \"Costa Rica\"                                           #>  [57] \"Côte d'Ivoire\"                                        #>  [58] \"Croatia\"                                              #>  [59] \"Cuba\"                                                 #>  [60] \"Curaçao\"                                              #>  [61] \"Cyprus\"                                               #>  [62] \"Czechia\"                                              #>  [63] \"Korea (Democratic People's Republic of)\"              #>  [64] \"Congo, Democratic Republic of the\"                    #>  [65] \"Denmark\"                                              #>  [66] \"Djibouti\"                                             #>  [67] \"Dominica\"                                             #>  [68] \"Dominican Republic\"                                   #>  [69] \"Ecuador\"                                              #>  [70] \"Egypt\"                                                #>  [71] \"El Salvador\"                                          #>  [72] \"Equatorial Guinea\"                                    #>  [73] \"Eritrea\"                                              #>  [74] \"Estonia\"                                              #>  [75] \"Eswatini\"                                             #>  [76] \"Ethiopia\"                                             #>  [77] \"Falkland Islands (Malvinas)\"                          #>  [78] \"Faroe Islands\"                                        #>  [79] \"Fiji\"                                                 #>  [80] \"Finland\"                                              #>  [81] \"France\"                                               #>  [82] \"French Guiana\"                                        #>  [83] \"French Polynesia\"                                     #>  [84] \"French Southern Territories\"                          #>  [85] \"Gabon\"                                                #>  [86] \"Gambia\"                                               #>  [87] \"Georgia\"                                              #>  [88] \"Germany\"                                              #>  [89] \"Ghana\"                                                #>  [90] \"Gibraltar\"                                            #>  [91] \"Greece\"                                               #>  [92] \"Greenland\"                                            #>  [93] \"Grenada\"                                              #>  [94] \"Guadeloupe\"                                           #>  [95] \"Guam\"                                                 #>  [96] \"Guatemala\"                                            #>  [97] \"Guernsey\"                                             #>  [98] \"Guinea\"                                               #>  [99] \"Guinea-Bissau\"                                        #> [100] \"Guyana\"                                               #> [101] \"Haiti\"                                                #> [102] \"Heard Island and McDonald Islands\"                    #> [103] \"Holy See\"                                             #> [104] \"Honduras\"                                             #> [105] \"Hungary\"                                              #> [106] \"Iceland\"                                              #> [107] \"India\"                                                #> [108] \"Indonesia\"                                            #> [109] \"Iran (Islamic Republic of)\"                           #> [110] \"Iraq\"                                                 #> [111] \"Ireland\"                                              #> [112] \"Isle of Man\"                                          #> [113] \"Israel\"                                               #> [114] \"Italy\"                                                #> [115] \"Jamaica\"                                              #> [116] \"Japan\"                                                #> [117] \"Jersey\"                                               #> [118] \"Jordan\"                                               #> [119] \"Kazakhstan\"                                           #> [120] \"Kenya\"                                                #> [121] \"Kiribati\"                                             #> [122] \"Kuwait\"                                               #> [123] \"Kyrgyzstan\"                                           #> [124] \"Lao People's Democratic Republic\"                     #> [125] \"Latvia\"                                               #> [126] \"Lebanon\"                                              #> [127] \"Lesotho\"                                              #> [128] \"Liberia\"                                              #> [129] \"Libya\"                                                #> [130] \"Liechtenstein\"                                        #> [131] \"Lithuania\"                                            #> [132] \"Luxembourg\"                                           #> [133] \"Madagascar\"                                           #> [134] \"Malawi\"                                               #> [135] \"Malaysia\"                                             #> [136] \"Maldives\"                                             #> [137] \"Mali\"                                                 #> [138] \"Malta\"                                                #> [139] \"Marshall Islands\"                                     #> [140] \"Martinique\"                                           #> [141] \"Mauritania\"                                           #> [142] \"Mauritius\"                                            #> [143] \"Mayotte\"                                              #> [144] \"Mexico\"                                               #> [145] \"Micronesia (Federated States of)\"                     #> [146] \"Monaco\"                                               #> [147] \"Mongolia\"                                             #> [148] \"Montenegro\"                                           #> [149] \"Montserrat\"                                           #> [150] \"Morocco\"                                              #> [151] \"Mozambique\"                                           #> [152] \"Myanmar\"                                              #> [153] \"Namibia\"                                              #> [154] \"Nauru\"                                                #> [155] \"Nepal\"                                                #> [156] \"Netherlands\"                                          #> [157] \"New Caledonia\"                                        #> [158] \"New Zealand\"                                          #> [159] \"Nicaragua\"                                            #> [160] \"Niger\"                                                #> [161] \"Nigeria\"                                              #> [162] \"Niue\"                                                 #> [163] \"Norfolk Island\"                                       #> [164] \"North Macedonia\"                                      #> [165] \"Northern Mariana Islands\"                             #> [166] \"Norway\"                                               #> [167] \"Oman\"                                                 #> [168] \"Pakistan\"                                             #> [169] \"Palau\"                                                #> [170] \"Panama\"                                               #> [171] \"Papua New Guinea\"                                     #> [172] \"Paraguay\"                                             #> [173] \"Peru\"                                                 #> [174] \"Philippines\"                                          #> [175] \"Pitcairn\"                                             #> [176] \"Poland\"                                               #> [177] \"Portugal\"                                             #> [178] \"Puerto Rico\"                                          #> [179] \"Qatar\"                                                #> [180] \"Korea, Republic of\"                                   #> [181] \"Moldova, Republic of\"                                 #> [182] \"Réunion\"                                              #> [183] \"Romania\"                                              #> [184] \"Russian Federation\"                                   #> [185] \"Rwanda\"                                               #> [186] \"Saint Barthélemy\"                                     #> [187] \"Saint Helena, Ascension and Tristan da Cunha\"         #> [188] \"Saint Kitts and Nevis\"                                #> [189] \"Saint Lucia\"                                          #> [190] \"Saint Martin (French part)\"                           #> [191] \"Saint Pierre and Miquelon\"                            #> [192] \"Saint Vincent and the Grenadines\"                     #> [193] \"Samoa\"                                                #> [194] \"San Marino\"                                           #> [195] \"Sao Tome and Principe\"                                #> [196] \"Saudi Arabia\"                                         #> [197] \"Senegal\"                                              #> [198] \"Serbia\"                                               #> [199] \"Seychelles\"                                           #> [200] \"Sierra Leone\"                                         #> [201] \"Singapore\"                                            #> [202] \"Sint Maarten (Dutch part)\"                            #> [203] \"Slovakia\"                                             #> [204] \"Slovenia\"                                             #> [205] \"Solomon Islands\"                                      #> [206] \"Somalia\"                                              #> [207] \"South Africa\"                                         #> [208] \"South Georgia and the South Sandwich Islands\"         #> [209] \"South Sudan\"                                          #> [210] \"Spain\"                                                #> [211] \"Sri Lanka\"                                            #> [212] \"Palestine, State of\"                                  #> [213] \"Sudan\"                                                #> [214] \"Suriname\"                                             #> [215] \"Svalbard and Jan Mayen\"                               #> [216] \"Sweden\"                                               #> [217] \"Switzerland\"                                          #> [218] \"Syrian Arab Republic\"                                 #> [219] \"Tajikistan\"                                           #> [220] \"Thailand\"                                             #> [221] \"Timor-Leste\"                                          #> [222] \"Togo\"                                                 #> [223] \"Tokelau\"                                              #> [224] \"Tonga\"                                                #> [225] \"Trinidad and Tobago\"                                  #> [226] \"Tunisia\"                                              #> [227] \"Turkey\"                                               #> [228] \"Turkmenistan\"                                         #> [229] \"Turks and Caicos Islands\"                             #> [230] \"Tuvalu\"                                               #> [231] \"Uganda\"                                               #> [232] \"Ukraine\"                                              #> [233] \"United Arab Emirates\"                                 #> [234] \"United Kingdom of Great Britain and Northern Ireland\" #> [235] \"Tanzania, United Republic of\"                         #> [236] \"United States Minor Outlying Islands\"                 #> [237] \"United States of America\"                             #> [238] \"Virgin Islands (U.S.)\"                                #> [239] \"Uruguay\"                                              #> [240] \"Uzbekistan\"                                           #> [241] \"Vanuatu\"                                              #> [242] \"Venezuela (Bolivarian Republic of)\"                   #> [243] \"Viet Nam\"                                             #> [244] \"Wallis and Futuna\"                                    #> [245] \"Western Sahara\"                                       #> [246] \"Yemen\"                                                #> [247] \"Zambia\"                                               #> [248] \"Zimbabwe\"                                             #> [249] \"Taiwan, Province of China\""},{"path":"https://fbellelli.github.io/countries/reference/list_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"List of accepted fields for the function country_info — list_fields","title":"List of accepted fields for the function country_info — list_fields","text":"function queries REST Countries API returns list possible fields can used function country_info. NOTE: Internet access needed download information API.","code":""},{"path":"https://fbellelli.github.io/countries/reference/list_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of accepted fields for the function country_info — list_fields","text":"","code":"list_fields()"},{"path":"https://fbellelli.github.io/countries/reference/list_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of accepted fields for the function country_info — list_fields","text":"vector accepted fields function country_info()","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/list_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of accepted fields for the function country_info — list_fields","text":"","code":"# Run example only if a connection to the API is available if (check_countries_api(warnings = FALSE)){  list_fields()  }"},{"path":"https://fbellelli.github.io/countries/reference/match_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a conversion table for country names — match_table","title":"Create a conversion table for country names — match_table","text":"function returns conversion table country names desired naming conventions languages. use fuzzy matching allows flexibility recognising identifying country names.","code":""},{"path":"https://fbellelli.github.io/countries/reference/match_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a conversion table for country names — match_table","text":"","code":"match_table(   x,   to = c(\"simple\", \"ISO3\"),   fuzzy_match = TRUE,   verbose = FALSE,   matching_info = FALSE,   simplify = TRUE,   na_fill = FALSE,   poor_matches = TRUE,   custom_table = NULL )"},{"path":"https://fbellelli.github.io/countries/reference/match_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a conversion table for country names — match_table","text":"x vector country names vector containing one desired naming conventions x converted (e.g. \"ISO3\", \"name_en\", \"UN_fr\", ...). list possible values click refer vignette country names vignette(\"dealing_with_names\"). Default c(\"simple\", \"ISO3\"). fuzzy_match Logical value indicating whether fuzzy matching country names allowed (TRUE), exact matches allowed (FALSE). Default TRUE. Switching FALSE result much faster execution. verbose Logical value indicating whether function print console report matching process. Default FALSE. matching_info Logical value. set true output match table include additional information matching x's entries. Default FALSE. simplify Logical value. set TRUE function return match table data.frame object. set FALSE, function return list object containing match table additional details country matching process. Default TRUE. na_fill Logical value. set TRUE, NA output names filled original country name supplied x. default FALSE (filling). general, NAs produced : 1) country present nomenclature requested (e.g. country_name(\"Abkhazia\", = \"ISO3\")), 2) input country name NA, 3) exact match found user sets option fuzzy_match = FALSE, 4) fuzzy match algorithm find good match user sets option poor_match = FALSE. na_fill argument gives option replace resulting NA original value x. poor_matches Logical value. set TRUE (default option), function always return closest matching country name, even matching poor. set FALSE, function return NA case poor matching. custom_table Custom conversion table used. needs data.frame object. Default NULL.","code":""},{"path":"https://fbellelli.github.io/countries/reference/match_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a conversion table for country names — match_table","text":"Returns conversion table countries names desired naming conventions. simplify=FALSE returns list object.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/match_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a conversion table for country names — match_table","text":"","code":"match_table(x=c(\"UK\",\"Estados Unidos\",\"Zaire\",\"C#te d^ivoire\"), to= c(\"UN_en\",\"ISO3\")) #>   list_countries                                                UN_en ISO3 #> 1  C#te d^ivoire                                        Côte d’Ivoire  CIV #> 2 Estados Unidos                             United States of America  USA #> 3             UK United Kingdom of Great Britain and Northern Ireland  GBR #> 4          Zaire                     Democratic Republic of the Congo  COD"},{"path":"https://fbellelli.github.io/countries/reference/mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical mode of a vector — Mode","title":"Statistical mode of a vector — Mode","text":"function returns mode vectors. say, given vector values, returns value appears frequently. function works strings, numerical mixed inputs. NA values treated distinct values.","code":""},{"path":"https://fbellelli.github.io/countries/reference/mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistical mode of a vector — Mode","text":"","code":"Mode(x, na.rm = FALSE, first_only = FALSE)"},{"path":"https://fbellelli.github.io/countries/reference/mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistical mode of a vector — Mode","text":"x vector na.rm Logical value indicating whether NA values omitted. Default FALSE. first_only Logical value indicating whether first mode returned x multiple modes (.e. multiple values highest number observations). Default FALSE.","code":""},{"path":"https://fbellelli.github.io/countries/reference/mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistical mode of a vector — Mode","text":"Returns mode vector x","code":""},{"path":"https://fbellelli.github.io/countries/reference/mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistical mode of a vector — Mode","text":"","code":"countries::Mode(c(\"a\",\"a\",2,3)) #> [1] \"a\" countries::Mode(c(1,1,2,3,NA,2)) #> [1] 1 2 countries::Mode(c(NA,NA,NA,1,1,2)) #> [1] NA"},{"path":"https://fbellelli.github.io/countries/reference/palettes_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete colour palettes — palettes_countries","title":"Discrete colour palettes — palettes_countries","text":"function provides access discrete colours palettes used packages' 11 themes.","code":""},{"path":"https://fbellelli.github.io/countries/reference/palettes_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete colour palettes — palettes_countries","text":"","code":"palettes_countries(n, theme = 1, reverse = FALSE)"},{"path":"https://fbellelli.github.io/countries/reference/palettes_countries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete colour palettes — palettes_countries","text":"n Number desired colours theme numeric value name identifying theme's colours. Can number 1 11, one theme's names: c(\"Default\", \"Greyscale\", \"Candy\", \"RedBlue\", \"Dark\", \"Reds\", \"Blues\", \"Greens\", \"Viridis\", \"Cividis\", \"Distinct\", \"Distinct2\", \"Paired\"). reverse Logical value indicating whether reverse order palette's colours Default FALSE.","code":""},{"path":"https://fbellelli.github.io/countries/reference/palettes_countries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete colour palettes — palettes_countries","text":"Returns n colours requested theme","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/palettes_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete colour palettes — palettes_countries","text":"","code":"palettes_countries(5, theme = 1) #> [1] \"#cb997e\" \"#ddbea9\" \"#ffe8d6\" \"#b7b7a4\" \"#545849\""},{"path":"https://fbellelli.github.io/countries/reference/parse.by.order.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function - Parses input merging order for function auto_join — parse.by.order","title":"Internal function - Parses input merging order for function auto_join — parse.by.order","text":"Internal function - Parses input merging order function auto_join","code":""},{"path":"https://fbellelli.github.io/countries/reference/parse.by.order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function - Parses input merging order for function auto_join — parse.by.order","text":"","code":"parse.by.order(data, by = NULL)"},{"path":"https://fbellelli.github.io/countries/reference/parse.by.order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function - Parses input merging order for function auto_join — parse.by.order","text":"data list tables provided auto_join function order provided user auto_join function","code":""},{"path":"https://fbellelli.github.io/countries/reference/parse.by.order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function - Parses input merging order for function auto_join — parse.by.order","text":"Returns cleaned order vector indicating type data element order.","code":""},{"path":"https://fbellelli.github.io/countries/reference/pick_colours.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function - return n spaced indices for picking colours from a palette — pick_colours","title":"Internal function - return n spaced indices for picking colours from a palette — pick_colours","text":"Internal function - return n spaced indices picking colours palette","code":""},{"path":"https://fbellelli.github.io/countries/reference/pick_colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function - return n spaced indices for picking colours from a palette — pick_colours","text":"","code":"pick_colours(n, n_colours_palette)"},{"path":"https://fbellelli.github.io/countries/reference/pick_colours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function - return n spaced indices for picking colours from a palette — pick_colours","text":"n Desired Number colours desired n_colours_palette Total number colours palette","code":""},{"path":"https://fbellelli.github.io/countries/reference/pick_colours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function - return n spaced indices for picking colours from a palette — pick_colours","text":"Returns n indices can used select colours palette n_colours_palette length","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/pick_colours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal function - return n spaced indices for picking colours from a palette — pick_colours","text":"","code":"countries:::pick_colours(5, 10) #> [1] 2 3 5 7 9"},{"path":"https://fbellelli.github.io/countries/reference/quick_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily visualise country data with a map — quick_map","title":"Easily visualise country data with a map — quick_map","text":"quick_map() allows plot country chloropleth maps one line code. inputs required data.frame object name column plot. function uses country_name()'s capabilities automatically match country names one territories ISO standard 3166-1. allows fuzzy matching country names multiple languages nomenclatures. map examples, see article.","code":""},{"path":"https://fbellelli.github.io/countries/reference/quick_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easily visualise country data with a map — quick_map","text":"","code":"quick_map(   data,   plot_col,   theme = 1,   zoom = \"Default\",   verbose = FALSE,   save_to = NULL,   width_plot = 30,   name_legend = NULL,   reverse_palette = FALSE,   col_breaks = NULL,   col_border = \"black\",   col_na = \"grey97\",   width_border = 0.1 )"},{"path":"https://fbellelli.github.io/countries/reference/quick_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easily visualise country data with a map — quick_map","text":"data Table (data.frame) containing data plot. row table correspond country. One columns contain country names. plot_col Name column plot. theme numeric value name identifying one predefined visual themes map. Can number 1 11, one predefined theme's names: c(\"Default\", \"Greyscale\", \"Candy\", \"RedBlue\", \"Dark\", \"Reds\", \"Blues\", \"Greens\", \"Viridis\", \"Cividis\", \"Distinct\", \"Distinct2\", \"Paired\"). 0 \"NoTheme\" passed, theme applied (default `ggplot2`'s settings used). zoom argument defines zoom applied map. can either string identifying one predefined zoom boxes (\"Default\", \"World\", \"Africa\", \"Asia\", \"Europe\", \"SEAsia\", \"NAmerica\", \"CAmerica\", \"SAmerica\", \"Oceania\"). Alternatively, user may provide numeric vector length 4 describing min/max longitude latitude (e.g. c(-80, -35, -55, 10) defines zoom South America). verbose Logical value indicating whether print messages console. Default FALSE. save_to Path file plot saved. need existing directory. default NULL, save plot. width_plot Width (cm) plot saved file. ratio height width fixed. argument relevant save_to different NULL. Default 30. custom saving options function ggsave() can used. name_legend String giving name used plotted variable legend map. nothing provided, default use name plot_col. reverse_palette Logical value indicating whether reverse order colours palette. Default FALSE. col_breaks relevant numeric data. argument allows user provide manual breaks colour scale. Needs numeric vector (c(0, 100, 500, 1000)). Default NULL, result breaks automatically selected function. Note data 6 less unique values treated factor function. col_border Colour border line separating countries landmasses. Default \"black\". col_na Colour countries missing data (NAs). Default \"grey97\". width_border Numeric value giving width border lines countries. Default `0.1`.","code":""},{"path":"https://fbellelli.github.io/countries/reference/quick_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easily visualise country data with a map — quick_map","text":"ggplot object","code":""},{"path":"https://fbellelli.github.io/countries/reference/quick_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Easily visualise country data with a map — quick_map","text":"Good know quick_map() allows plotting territories ISO standard 3166-1. support plotting regions. output function ggplot object. means means users can customise look output applying ggplot's methods. Disclaimer Territories' borders shapes intended illustrative purpose. might outdated imply expression opinion part package developers.","code":""},{"path":"https://fbellelli.github.io/countries/reference/quick_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easily visualise country data with a map — quick_map","text":"","code":"# creating some sample data to plot example_data <- data.frame(country = random_countries(100), population = runif(100))  # make a map quick_map(example_data, \"population\")   # The function provides several predefined themes quick_map(example_data, \"population\", theme = 3)  quick_map(example_data, \"population\", theme = \"Reds\")   # provide breaks for the colour scale quick_map(example_data, \"population\", col_breaks = c(0, 1e5, 1e6, 1e7, 1e8, 1e9))"},{"path":"https://fbellelli.github.io/countries/reference/random_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Output random country names — random_countries","title":"Output random country names — random_countries","text":"function returns mode vectors. say, given vector values, returns value appears frequently. function works strings, numerical mixed inputs. NA values treated distinct values.","code":""},{"path":"https://fbellelli.github.io/countries/reference/random_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output random country names — random_countries","text":"","code":"random_countries(n, replace = FALSE, nomenclature = \"name_en\", seed = NULL)"},{"path":"https://fbellelli.github.io/countries/reference/random_countries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output random country names — random_countries","text":"n Number desired (pseudo)random country names. replace Logical value indicating whether sampling replacement. nomenclature Nomenclature list countries taken. countries present nomenclature, example Taiwan recognised UN, returned \"WTO_en\". function accept nomenclatures country_name. list accepted values, refer page. default name_en, English list names ISO standard 3166. seed Single numerical value used seed.","code":""},{"path":"https://fbellelli.github.io/countries/reference/random_countries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output random country names — random_countries","text":"vector n (pseudo)random country names.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/random_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output random country names — random_countries","text":"","code":"random_countries(10) #>  [1] \"Dominican Republic\"          \"Morocco\"                     #>  [3] \"Australia\"                   \"Zimbabwe\"                    #>  [5] \"Jamaica\"                     \"Malawi\"                      #>  [7] \"Argentina\"                   \"Lithuania\"                   #>  [9] \"Kuwait\"                      \"French Southern Territories\" random_countries(n = 500, replace = TRUE) #>   [1] \"Heard Island and McDonald Islands\"                    #>   [2] \"Vanuatu\"                                              #>   [3] \"Madagascar\"                                           #>   [4] \"Belize\"                                               #>   [5] \"Malta\"                                                #>   [6] \"Somalia\"                                              #>   [7] \"Vanuatu\"                                              #>   [8] \"Seychelles\"                                           #>   [9] \"Greece\"                                               #>  [10] \"Niue\"                                                 #>  [11] \"Saint Kitts and Nevis\"                                #>  [12] \"New Caledonia\"                                        #>  [13] \"Sri Lanka\"                                            #>  [14] \"Micronesia (Federated States of)\"                     #>  [15] \"Serbia\"                                               #>  [16] \"Ghana\"                                                #>  [17] \"Serbia\"                                               #>  [18] \"Norway\"                                               #>  [19] \"Netherlands\"                                          #>  [20] \"Belize\"                                               #>  [21] \"Cyprus\"                                               #>  [22] \"Gibraltar\"                                            #>  [23] \"Northern Mariana Islands\"                             #>  [24] \"Honduras\"                                             #>  [25] \"Congo\"                                                #>  [26] \"Switzerland\"                                          #>  [27] \"Cayman Islands\"                                       #>  [28] \"Singapore\"                                            #>  [29] \"Comoros\"                                              #>  [30] \"Pakistan\"                                             #>  [31] \"Denmark\"                                              #>  [32] \"Maldives\"                                             #>  [33] \"Ireland\"                                              #>  [34] \"Syrian Arab Republic\"                                 #>  [35] \"Uruguay\"                                              #>  [36] \"Madagascar\"                                           #>  [37] \"Iran (Islamic Republic of)\"                           #>  [38] \"Wallis and Futuna\"                                    #>  [39] \"Luxembourg\"                                           #>  [40] \"Liechtenstein\"                                        #>  [41] \"Afghanistan\"                                          #>  [42] \"Iraq\"                                                 #>  [43] \"Finland\"                                              #>  [44] \"Argentina\"                                            #>  [45] \"Turkey\"                                               #>  [46] \"South Africa\"                                         #>  [47] \"Puerto Rico\"                                          #>  [48] \"Armenia\"                                              #>  [49] \"Kyrgyzstan\"                                           #>  [50] \"Kazakhstan\"                                           #>  [51] \"Costa Rica\"                                           #>  [52] \"Chile\"                                                #>  [53] \"Turks and Caicos Islands\"                             #>  [54] \"South Georgia and the South Sandwich Islands\"         #>  [55] \"Malta\"                                                #>  [56] \"Nigeria\"                                              #>  [57] \"Svalbard and Jan Mayen\"                               #>  [58] \"Zimbabwe\"                                             #>  [59] \"Australia\"                                            #>  [60] \"Panama\"                                               #>  [61] \"Korea, Republic of\"                                   #>  [62] \"Eritrea\"                                              #>  [63] \"Mongolia\"                                             #>  [64] \"Namibia\"                                              #>  [65] \"Estonia\"                                              #>  [66] \"Guernsey\"                                             #>  [67] \"Paraguay\"                                             #>  [68] \"Syrian Arab Republic\"                                 #>  [69] \"Bhutan\"                                               #>  [70] \"Uzbekistan\"                                           #>  [71] \"Malaysia\"                                             #>  [72] \"San Marino\"                                           #>  [73] \"Saint Helena, Ascension and Tristan da Cunha\"         #>  [74] \"Dominica\"                                             #>  [75] \"Cameroon\"                                             #>  [76] \"Mauritius\"                                            #>  [77] \"Libya\"                                                #>  [78] \"Syrian Arab Republic\"                                 #>  [79] \"United Arab Emirates\"                                 #>  [80] \"Solomon Islands\"                                      #>  [81] \"Dominican Republic\"                                   #>  [82] \"Tokelau\"                                              #>  [83] \"Bouvet Island\"                                        #>  [84] \"Bolivia (Plurinational State of)\"                     #>  [85] \"Djibouti\"                                             #>  [86] \"El Salvador\"                                          #>  [87] \"Haiti\"                                                #>  [88] \"Qatar\"                                                #>  [89] \"Saint Martin (French part)\"                           #>  [90] \"Madagascar\"                                           #>  [91] \"Turkey\"                                               #>  [92] \"San Marino\"                                           #>  [93] \"Denmark\"                                              #>  [94] \"North Macedonia\"                                      #>  [95] \"Iraq\"                                                 #>  [96] \"Timor-Leste\"                                          #>  [97] \"Norfolk Island\"                                       #>  [98] \"Equatorial Guinea\"                                    #>  [99] \"South Sudan\"                                          #> [100] \"Andorra\"                                              #> [101] \"United States of America\"                             #> [102] \"Canada\"                                               #> [103] \"Palau\"                                                #> [104] \"French Southern Territories\"                          #> [105] \"Eritrea\"                                              #> [106] \"Tunisia\"                                              #> [107] \"France\"                                               #> [108] \"Cyprus\"                                               #> [109] \"Pitcairn\"                                             #> [110] \"Russian Federation\"                                   #> [111] \"Senegal\"                                              #> [112] \"Turkey\"                                               #> [113] \"Palau\"                                                #> [114] \"Sint Maarten (Dutch part)\"                            #> [115] \"French Southern Territories\"                          #> [116] \"El Salvador\"                                          #> [117] \"Ethiopia\"                                             #> [118] \"Moldova, Republic of\"                                 #> [119] \"Moldova, Republic of\"                                 #> [120] \"Bangladesh\"                                           #> [121] \"Singapore\"                                            #> [122] \"Saint Lucia\"                                          #> [123] \"Slovenia\"                                             #> [124] \"Korea (Democratic People's Republic of)\"              #> [125] \"Mali\"                                                 #> [126] \"Ukraine\"                                              #> [127] \"Kyrgyzstan\"                                           #> [128] \"Anguilla\"                                             #> [129] \"Hungary\"                                              #> [130] \"Afghanistan\"                                          #> [131] \"Lebanon\"                                              #> [132] \"Japan\"                                                #> [133] \"Cook Islands\"                                         #> [134] \"Guinea\"                                               #> [135] \"Argentina\"                                            #> [136] \"Macao\"                                                #> [137] \"Iceland\"                                              #> [138] \"Afghanistan\"                                          #> [139] \"Colombia\"                                             #> [140] \"Malaysia\"                                             #> [141] \"Cook Islands\"                                         #> [142] \"Gabon\"                                                #> [143] \"Denmark\"                                              #> [144] \"French Guiana\"                                        #> [145] \"Brunei Darussalam\"                                    #> [146] \"Ethiopia\"                                             #> [147] \"Netherlands\"                                          #> [148] \"Mexico\"                                               #> [149] \"Nicaragua\"                                            #> [150] \"Barbados\"                                             #> [151] \"Turkmenistan\"                                         #> [152] \"Virgin Islands (U.S.)\"                                #> [153] \"Poland\"                                               #> [154] \"Philippines\"                                          #> [155] \"Mozambique\"                                           #> [156] \"Saint Barthélemy\"                                     #> [157] \"Guyana\"                                               #> [158] \"Cabo Verde\"                                           #> [159] \"Wallis and Futuna\"                                    #> [160] \"Korea (Democratic People's Republic of)\"              #> [161] \"Antarctica\"                                           #> [162] \"Bahamas\"                                              #> [163] \"Chad\"                                                 #> [164] \"Guinea-Bissau\"                                        #> [165] \"China\"                                                #> [166] \"Armenia\"                                              #> [167] \"Mauritius\"                                            #> [168] \"Pakistan\"                                             #> [169] \"Panama\"                                               #> [170] \"Afghanistan\"                                          #> [171] \"Malaysia\"                                             #> [172] \"Italy\"                                                #> [173] \"Åland Islands\"                                        #> [174] \"Tokelau\"                                              #> [175] \"Saint Martin (French part)\"                           #> [176] \"Jamaica\"                                              #> [177] \"Kuwait\"                                               #> [178] \"Belgium\"                                              #> [179] \"Costa Rica\"                                           #> [180] \"Hong Kong\"                                            #> [181] \"Canada\"                                               #> [182] \"Northern Mariana Islands\"                             #> [183] \"Romania\"                                              #> [184] \"Spain\"                                                #> [185] \"New Zealand\"                                          #> [186] \"Denmark\"                                              #> [187] \"Burundi\"                                              #> [188] \"Saint Pierre and Miquelon\"                            #> [189] \"Faroe Islands\"                                        #> [190] \"Armenia\"                                              #> [191] \"British Indian Ocean Territory\"                       #> [192] \"Yemen\"                                                #> [193] \"Norfolk Island\"                                       #> [194] \"Saint Martin (French part)\"                           #> [195] \"Slovakia\"                                             #> [196] \"Svalbard and Jan Mayen\"                               #> [197] \"Brunei Darussalam\"                                    #> [198] \"Gabon\"                                                #> [199] \"Aruba\"                                                #> [200] \"Trinidad and Tobago\"                                  #> [201] \"Malta\"                                                #> [202] \"Luxembourg\"                                           #> [203] \"Venezuela (Bolivarian Republic of)\"                   #> [204] \"Denmark\"                                              #> [205] \"Central African Republic\"                             #> [206] \"United States of America\"                             #> [207] \"Samoa\"                                                #> [208] \"Afghanistan\"                                          #> [209] \"Zambia\"                                               #> [210] \"Vanuatu\"                                              #> [211] \"British Indian Ocean Territory\"                       #> [212] \"Guinea\"                                               #> [213] \"Germany\"                                              #> [214] \"Panama\"                                               #> [215] \"Cameroon\"                                             #> [216] \"Qatar\"                                                #> [217] \"Turkey\"                                               #> [218] \"Ecuador\"                                              #> [219] \"Korea (Democratic People's Republic of)\"              #> [220] \"Lesotho\"                                              #> [221] \"Romania\"                                              #> [222] \"Montserrat\"                                           #> [223] \"Serbia\"                                               #> [224] \"Benin\"                                                #> [225] \"Czechia\"                                              #> [226] \"Paraguay\"                                             #> [227] \"Djibouti\"                                             #> [228] \"Libya\"                                                #> [229] \"Viet Nam\"                                             #> [230] \"Faroe Islands\"                                        #> [231] \"British Indian Ocean Territory\"                       #> [232] \"Liberia\"                                              #> [233] \"Iraq\"                                                 #> [234] \"Uganda\"                                               #> [235] \"Georgia\"                                              #> [236] \"Mayotte\"                                              #> [237] \"Heard Island and McDonald Islands\"                    #> [238] \"Gambia\"                                               #> [239] \"Barbados\"                                             #> [240] \"Senegal\"                                              #> [241] \"Tanzania, United Republic of\"                         #> [242] \"Brazil\"                                               #> [243] \"Luxembourg\"                                           #> [244] \"France\"                                               #> [245] \"Hong Kong\"                                            #> [246] \"Burundi\"                                              #> [247] \"Nicaragua\"                                            #> [248] \"Faroe Islands\"                                        #> [249] \"Luxembourg\"                                           #> [250] \"Cabo Verde\"                                           #> [251] \"Timor-Leste\"                                          #> [252] \"South Sudan\"                                          #> [253] \"Turkmenistan\"                                         #> [254] \"Belize\"                                               #> [255] \"Réunion\"                                              #> [256] \"Denmark\"                                              #> [257] \"New Caledonia\"                                        #> [258] \"British Indian Ocean Territory\"                       #> [259] \"Guatemala\"                                            #> [260] \"Morocco\"                                              #> [261] \"Pakistan\"                                             #> [262] \"Lebanon\"                                              #> [263] \"Canada\"                                               #> [264] \"Seychelles\"                                           #> [265] \"New Zealand\"                                          #> [266] \"Iceland\"                                              #> [267] \"Palau\"                                                #> [268] \"Montenegro\"                                           #> [269] \"Faroe Islands\"                                        #> [270] \"Palau\"                                                #> [271] \"Morocco\"                                              #> [272] \"South Georgia and the South Sandwich Islands\"         #> [273] \"Azerbaijan\"                                           #> [274] \"Malta\"                                                #> [275] \"Israel\"                                               #> [276] \"Montenegro\"                                           #> [277] \"Côte d'Ivoire\"                                        #> [278] \"Saint Barthélemy\"                                     #> [279] \"Grenada\"                                              #> [280] \"Samoa\"                                                #> [281] \"Peru\"                                                 #> [282] \"Albania\"                                              #> [283] \"Haiti\"                                                #> [284] \"Costa Rica\"                                           #> [285] \"Bangladesh\"                                           #> [286] \"Indonesia\"                                            #> [287] \"Libya\"                                                #> [288] \"Kyrgyzstan\"                                           #> [289] \"Antarctica\"                                           #> [290] \"Lesotho\"                                              #> [291] \"Sao Tome and Principe\"                                #> [292] \"Congo, Democratic Republic of the\"                    #> [293] \"Chad\"                                                 #> [294] \"Eswatini\"                                             #> [295] \"Denmark\"                                              #> [296] \"American Samoa\"                                       #> [297] \"Svalbard and Jan Mayen\"                               #> [298] \"Virgin Islands (British)\"                             #> [299] \"Saudi Arabia\"                                         #> [300] \"Zimbabwe\"                                             #> [301] \"Barbados\"                                             #> [302] \"Rwanda\"                                               #> [303] \"Uganda\"                                               #> [304] \"Comoros\"                                              #> [305] \"Bahamas\"                                              #> [306] \"Wallis and Futuna\"                                    #> [307] \"El Salvador\"                                          #> [308] \"Turkey\"                                               #> [309] \"Montserrat\"                                           #> [310] \"Greenland\"                                            #> [311] \"Saint Lucia\"                                          #> [312] \"Namibia\"                                              #> [313] \"Portugal\"                                             #> [314] \"Lebanon\"                                              #> [315] \"Turkmenistan\"                                         #> [316] \"Denmark\"                                              #> [317] \"Uganda\"                                               #> [318] \"Liechtenstein\"                                        #> [319] \"Sudan\"                                                #> [320] \"Kuwait\"                                               #> [321] \"Montserrat\"                                           #> [322] \"Ghana\"                                                #> [323] \"Bulgaria\"                                             #> [324] \"Saint Martin (French part)\"                           #> [325] \"Armenia\"                                              #> [326] \"Algeria\"                                              #> [327] \"Heard Island and McDonald Islands\"                    #> [328] \"Curaçao\"                                              #> [329] \"Monaco\"                                               #> [330] \"French Southern Territories\"                          #> [331] \"Belgium\"                                              #> [332] \"Saint Lucia\"                                          #> [333] \"Peru\"                                                 #> [334] \"Rwanda\"                                               #> [335] \"Guyana\"                                               #> [336] \"Nigeria\"                                              #> [337] \"Mozambique\"                                           #> [338] \"Burkina Faso\"                                         #> [339] \"Macao\"                                                #> [340] \"Senegal\"                                              #> [341] \"Sint Maarten (Dutch part)\"                            #> [342] \"El Salvador\"                                          #> [343] \"Cocos (Keeling) Islands\"                              #> [344] \"Palau\"                                                #> [345] \"Sudan\"                                                #> [346] \"Korea (Democratic People's Republic of)\"              #> [347] \"Australia\"                                            #> [348] \"Algeria\"                                              #> [349] \"Tanzania, United Republic of\"                         #> [350] \"Vanuatu\"                                              #> [351] \"Sierra Leone\"                                         #> [352] \"Dominican Republic\"                                   #> [353] \"Togo\"                                                 #> [354] \"Bahrain\"                                              #> [355] \"Mayotte\"                                              #> [356] \"French Southern Territories\"                          #> [357] \"Antarctica\"                                           #> [358] \"Korea, Republic of\"                                   #> [359] \"Eritrea\"                                              #> [360] \"Isle of Man\"                                          #> [361] \"New Caledonia\"                                        #> [362] \"Trinidad and Tobago\"                                  #> [363] \"Mozambique\"                                           #> [364] \"Poland\"                                               #> [365] \"Uzbekistan\"                                           #> [366] \"France\"                                               #> [367] \"Argentina\"                                            #> [368] \"Colombia\"                                             #> [369] \"Israel\"                                               #> [370] \"Virgin Islands (British)\"                             #> [371] \"United States of America\"                             #> [372] \"Cameroon\"                                             #> [373] \"Peru\"                                                 #> [374] \"Armenia\"                                              #> [375] \"Guinea\"                                               #> [376] \"Peru\"                                                 #> [377] \"Germany\"                                              #> [378] \"Albania\"                                              #> [379] \"Tokelau\"                                              #> [380] \"Togo\"                                                 #> [381] \"Mozambique\"                                           #> [382] \"Central African Republic\"                             #> [383] \"Congo, Democratic Republic of the\"                    #> [384] \"Macao\"                                                #> [385] \"Faroe Islands\"                                        #> [386] \"Nicaragua\"                                            #> [387] \"Ukraine\"                                              #> [388] \"Eswatini\"                                             #> [389] \"Peru\"                                                 #> [390] \"Antarctica\"                                           #> [391] \"South Africa\"                                         #> [392] \"Malaysia\"                                             #> [393] \"Eswatini\"                                             #> [394] \"Guernsey\"                                             #> [395] \"Malawi\"                                               #> [396] \"Bermuda\"                                              #> [397] \"Ghana\"                                                #> [398] \"Sao Tome and Principe\"                                #> [399] \"Djibouti\"                                             #> [400] \"Niger\"                                                #> [401] \"Namibia\"                                              #> [402] \"Zambia\"                                               #> [403] \"Iran (Islamic Republic of)\"                           #> [404] \"Northern Mariana Islands\"                             #> [405] \"Palestine, State of\"                                  #> [406] \"Portugal\"                                             #> [407] \"Barbados\"                                             #> [408] \"Sudan\"                                                #> [409] \"Togo\"                                                 #> [410] \"Tokelau\"                                              #> [411] \"Sri Lanka\"                                            #> [412] \"Philippines\"                                          #> [413] \"Cambodia\"                                             #> [414] \"Morocco\"                                              #> [415] \"Tokelau\"                                              #> [416] \"Palestine, State of\"                                  #> [417] \"Eswatini\"                                             #> [418] \"Moldova, Republic of\"                                 #> [419] \"New Caledonia\"                                        #> [420] \"Isle of Man\"                                          #> [421] \"Bhutan\"                                               #> [422] \"South Sudan\"                                          #> [423] \"Svalbard and Jan Mayen\"                               #> [424] \"Réunion\"                                              #> [425] \"Peru\"                                                 #> [426] \"Timor-Leste\"                                          #> [427] \"Nepal\"                                                #> [428] \"Namibia\"                                              #> [429] \"Hungary\"                                              #> [430] \"Turks and Caicos Islands\"                             #> [431] \"Czechia\"                                              #> [432] \"Oman\"                                                 #> [433] \"Ghana\"                                                #> [434] \"Iceland\"                                              #> [435] \"Kiribati\"                                             #> [436] \"Montenegro\"                                           #> [437] \"Egypt\"                                                #> [438] \"Samoa\"                                                #> [439] \"Belize\"                                               #> [440] \"Andorra\"                                              #> [441] \"Guam\"                                                 #> [442] \"Uruguay\"                                              #> [443] \"Equatorial Guinea\"                                    #> [444] \"Estonia\"                                              #> [445] \"Argentina\"                                            #> [446] \"Finland\"                                              #> [447] \"Falkland Islands (Malvinas)\"                          #> [448] \"Martinique\"                                           #> [449] \"El Salvador\"                                          #> [450] \"Solomon Islands\"                                      #> [451] \"Costa Rica\"                                           #> [452] \"Montenegro\"                                           #> [453] \"Denmark\"                                              #> [454] \"Canada\"                                               #> [455] \"Isle of Man\"                                          #> [456] \"Portugal\"                                             #> [457] \"Kazakhstan\"                                           #> [458] \"Togo\"                                                 #> [459] \"Moldova, Republic of\"                                 #> [460] \"France\"                                               #> [461] \"Christmas Island\"                                     #> [462] \"Grenada\"                                              #> [463] \"Australia\"                                            #> [464] \"French Southern Territories\"                          #> [465] \"Hungary\"                                              #> [466] \"Lesotho\"                                              #> [467] \"Svalbard and Jan Mayen\"                               #> [468] \"Nepal\"                                                #> [469] \"Bonaire, Sint Eustatius and Saba\"                     #> [470] \"Panama\"                                               #> [471] \"Saint Kitts and Nevis\"                                #> [472] \"Malaysia\"                                             #> [473] \"Bermuda\"                                              #> [474] \"Timor-Leste\"                                          #> [475] \"Martinique\"                                           #> [476] \"Georgia\"                                              #> [477] \"Saint Helena, Ascension and Tristan da Cunha\"         #> [478] \"Cuba\"                                                 #> [479] \"Montenegro\"                                           #> [480] \"Bolivia (Plurinational State of)\"                     #> [481] \"Albania\"                                              #> [482] \"Angola\"                                               #> [483] \"Tunisia\"                                              #> [484] \"Sweden\"                                               #> [485] \"United Kingdom of Great Britain and Northern Ireland\" #> [486] \"Kiribati\"                                             #> [487] \"Barbados\"                                             #> [488] \"Lao People's Democratic Republic\"                     #> [489] \"Germany\"                                              #> [490] \"Cabo Verde\"                                           #> [491] \"India\"                                                #> [492] \"Bermuda\"                                              #> [493] \"Albania\"                                              #> [494] \"Georgia\"                                              #> [495] \"Mongolia\"                                             #> [496] \"Vanuatu\"                                              #> [497] \"Peru\"                                                 #> [498] \"Mayotte\"                                              #> [499] \"Saint Pierre and Miquelon\"                            #> [500] \"Benin\"                                                random_countries(n = 5, nomenclature = \"ISO3\", seed = 5) #> [1] \"DJI\" \"IND\" \"RWA\" \"ZAF\" \"SVK\""},{"path":"https://fbellelli.github.io/countries/reference/themes_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function - ggplot themes for quick_map — themes_countries","title":"Internal function - ggplot themes for quick_map — themes_countries","text":"Internal function - ggplot themes quick_map","code":""},{"path":"https://fbellelli.github.io/countries/reference/themes_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function - ggplot themes for quick_map — themes_countries","text":"","code":"themes_countries(theme = 1)"},{"path":"https://fbellelli.github.io/countries/reference/themes_countries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function - ggplot themes for quick_map — themes_countries","text":"theme numeric value name identifying theme's colours. Can number 1 11, one theme's names: c(\"Default\", \"Greyscale\", \"Candy\", \"RedBlue\", \"Dark\", \"Reds\", \"Blues\", \"Greens\", \"Viridis\", \"Cividis\", \"Distinct\").","code":""},{"path":"https://fbellelli.github.io/countries/reference/themes_countries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function - ggplot themes for quick_map — themes_countries","text":"Returns n indices can used select colours palette n_colours_palette length","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/themes_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal function - ggplot themes for quick_map — themes_countries","text":"","code":"countries:::themes_countries(theme = 1) #> List of 9 #>  $ axis.text        : list() #>   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\" #>  $ axis.ticks       : list() #>   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\" #>  $ legend.background:List of 5 #>   ..$ fill         : chr \"transparent\" #>   ..$ colour       : logi NA #>   ..$ linewidth    : NULL #>   ..$ linetype     : NULL #>   ..$ inherit.blank: logi FALSE #>   ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\" #>  $ legend.position  : chr \"bottom\" #>  $ legend.box.margin: 'margin' num [1:4] 0points 0points 0points 0points #>   ..- attr(*, \"unit\")= int 8 #>  $ panel.background :List of 5 #>   ..$ fill         : chr \"#D0E8FA\" #>   ..$ colour       : chr \"grey30\" #>   ..$ linewidth    : NULL #>   ..$ linetype     : NULL #>   ..$ inherit.blank: logi FALSE #>   ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\" #>  $ panel.border     : list() #>   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\" #>  $ panel.grid       : list() #>   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\" #>  $ plot.background  :List of 5 #>   ..$ fill         : chr \"transparent\" #>   ..$ colour       : logi NA #>   ..$ linewidth    : NULL #>   ..$ linetype     : NULL #>   ..$ inherit.blank: logi FALSE #>   ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\" #>  - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\" #>  - attr(*, \"complete\")= logi FALSE #>  - attr(*, \"validate\")= logi TRUE"},{"path":"https://fbellelli.github.io/countries/reference/which_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Return location of minimum, maximum and mode values' index — which_min","title":"Return location of minimum, maximum and mode values' index — which_min","text":"function return position (index) minimum, maximum, mode values vector x. which_min() which_max() support numeric logical vectors. functions identical .min() .max(), except minima/maxima returned instead first one.","code":""},{"path":"https://fbellelli.github.io/countries/reference/which_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return location of minimum, maximum and mode values' index — which_min","text":"","code":"which_min(x, first_only = FALSE)  which_max(x, first_only = FALSE)  which_mode(x, first_only = FALSE)"},{"path":"https://fbellelli.github.io/countries/reference/which_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return location of minimum, maximum and mode values' index — which_min","text":"x numeric vector first_only Logical value indicating whether first value returned (.e. TRUE function behaves like .min() .max()). Default FALSE.","code":""},{"path":"https://fbellelli.github.io/countries/reference/which_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return location of minimum, maximum and mode values' index — which_min","text":"Returns position minimum, maximum mode values vector x","code":""},{"path":[]},{"path":"https://fbellelli.github.io/countries/reference/which_min.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return location of minimum, maximum and mode values' index — which_min","text":"","code":"which_mode(c(\"a\",\"a\",2,3)) #> [1] 1 2 which_min(c(1,1,2,3,NA,2)) #> [1] 1 2 which_max(c(NA,NA,NA,1,1,2)) #> [1] 6"},{"path":"https://fbellelli.github.io/countries/reference/world.html","id":null,"dir":"Reference","previous_headings":"","what":"World map data — world","title":"World map data — world","text":"table containing points draw world map. data comes package maps (\"world\") additional column added ISO 3-digit country codes.","code":""},{"path":"https://fbellelli.github.io/countries/reference/world.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"World map data — world","text":"","code":"world"},{"path":"https://fbellelli.github.io/countries/reference/world.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"World map data — world","text":"data frame six columns providing information plot world maps. long Longitude lat Latitude group Numeric value used identify polygons order Order lines traced region Name polygon's geographic region ISO3 3-digits ISO country code region","code":""},{"path":"https://fbellelli.github.io/countries/news/index.html","id":"countries-122","dir":"Changelog","previous_headings":"","what":"countries 1.2.2","title":"countries 1.2.2","text":"Patch fix bug unit tests due changes ggplot2 package.","code":""},{"path":"https://fbellelli.github.io/countries/news/index.html","id":"countries-121","dir":"Changelog","previous_headings":"","what":"countries 1.2.1","title":"countries 1.2.1","text":"CRAN release: 2025-02-22 Fixed bug preventing connection countries REST API.","code":""},{"path":"https://fbellelli.github.io/countries/news/index.html","id":"countries-120","dir":"Changelog","previous_headings":"","what":"countries 1.2.0","title":"countries 1.2.0","text":"CRAN release: 2024-01-21 Added function check_countries_api check whether connection Countries REST API working. Updated country reference table improve matching former Yugoslavian countries. Improved messages provided country_name match_table added argument na_fill replace potential NAs original country name. Updated vignettes","code":""},{"path":"https://fbellelli.github.io/countries/news/index.html","id":"countries-112","dir":"Changelog","previous_headings":"","what":"countries 1.1.2","title":"countries 1.1.2","text":"CRAN release: 2024-01-10 Improving handling API connection errors function country_info list_fields Fixing bug quick_map occurring plot_col identical one columns table countries::world","code":""},{"path":"https://fbellelli.github.io/countries/news/index.html","id":"countries-111","dir":"Changelog","previous_headings":"","what":"countries 1.1.1","title":"countries 1.1.1","text":"CRAN release: 2023-11-07 Added function list_countries obtain list countries Added function random_countries obtain random country names Corrected small nomenclature mistake country reference list Added two new palettes palettes_countries Updated vignettes","code":""},{"path":"https://fbellelli.github.io/countries/news/index.html","id":"countries-105","dir":"Changelog","previous_headings":"","what":"countries 1.0.5","title":"countries 1.0.5","text":"CRAN release: 2023-10-06 Patch address change behaviour function .atomic","code":""},{"path":"https://fbellelli.github.io/countries/news/index.html","id":"countries-104","dir":"Changelog","previous_headings":"","what":"countries 1.0.4","title":"countries 1.0.4","text":"CRAN release: 2023-09-24 Fixed bug auto_merge preventing column names passed order regular expressions.","code":""},{"path":"https://fbellelli.github.io/countries/news/index.html","id":"countries-103","dir":"Changelog","previous_headings":"","what":"countries 1.0.3","title":"countries 1.0.3","text":"CRAN release: 2023-09-01 Fixed hyperlinks resubmission Eliminated references unexported objects documentation Package accepted CRAN!!","code":""},{"path":"https://fbellelli.github.io/countries/news/index.html","id":"countries-10","dir":"Changelog","previous_headings":"","what":"countries 1.0","title":"countries 1.0","text":"First CRAN submission","code":""},{"path":"https://fbellelli.github.io/countries/news/index.html","id":"countries-03","dir":"Changelog","previous_headings":"","what":"countries 0.3","title":"countries 0.3","text":"Added function country_info() download information countries (e.g. capital city, currency, neighbouring countries, etc.) Added function list_fields() returning list accepted fields country_info() Added function auto_merge() quickly join multiple dataset automatically deal country names time columns Added function auto_melt() automatically pivot tables containing country names years headers Added function quick_map() easily plot coloured country maps Added function palettes_countries() providing access package’s colour themes Added vignette plotting chloropleth maps quick_map merging country data auto_merge() Bug fixes","code":""},{"path":"https://fbellelli.github.io/countries/news/index.html","id":"countries-02","dir":"Changelog","previous_headings":"","what":"countries 0.2","title":"countries 0.2","text":"Added function is_country() test whether string country name related list countries names Added function is_date() test whether values dates Added function is_keycol() test whether set columns keys table Added function find_countrycol() automate search columns containing country names data frames Added function find_timecol() automate search date /year columns data frames Added function find_keycol() automate search table keys data frames Added functions which_min(), which_max() which_mode() returning positions vector’s minimum, maximum mode values. Speed improvements functions country_name() match_table() Bug fixes Added vignette data structure","code":""},{"path":"https://fbellelli.github.io/countries/news/index.html","id":"countries-01","dir":"Changelog","previous_headings":"","what":"countries 0.1","title":"countries 0.1","text":"Function country_name() converting translating country names based fuzzy matching approach Function match_table() easily construct conversion tables help fuzzy matching algorithm Function Mode() returns statistical mode vectors (frequent observation) Dataset country_reference_list containing country names different languages naming conventions Added vignettes documentation Created website package","code":""}]
